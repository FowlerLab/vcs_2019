library(dplyr)
library(pROC)
# Chunk 3
## define functions
## A helper function that tests whether an object is either NULL _or_
## a list of NULLs
is.NullOb <- function(x) is.null(x) | all(sapply(x, is.null))
## Recursively step down into list, removing all such objects
rmNullObs <- function(x) {
x <- Filter(Negate(is.NullOb), x)
lapply(x, function(x) if (is.list(x)) rmNullObs(x) else x)
}
# Chunk 4
## seq_to_score
seq_to_score <- function(seq, score_matrix) {
# separate seq into individual characters
str_vector = unlist(strsplit(seq, ''))
# get the row positions from the str_vector
rows = sapply(str_vector, function(mt_aa) {
return(which(row.names(score_matrix) == mt_aa))
})
# calculate the score
score = sum(sapply(seq(1,ncol(score_matrix)), function(pos) score_matrix[rows[pos], pos]))
return(score)
}
# Chunk 5
## score_protein_seq
score_protein_seq <- function(seq_name, input_seq, score_matrix, background_values) {
# print statement
print(paste0('Annotating ', seq_name, '...'))
# split the sequence into individual amino acids
input_seq = unlist(strsplit(input_seq, ''))
# apply over indices of the sequence
result = sapply(seq(1, length(input_seq) - 10), function(start_pos) {
# grab the 11 aminno acids starting at the start pos
test_motif = input_seq[start_pos :(start_pos + 10)]
# get the row positions from the str_vector
rows = sapply(test_motif, function(mt_aa) {
return(which(row.names(score_matrix) == mt_aa))
})
# calculate the pssm score, p value, center position, and end position of the candidate motif
score = sum(sapply(seq(1,11), function(pos) score_matrix[rows[pos], pos]))
pval = 1 - pnorm((score - mean(background_values)) / sd(background_values))
center_pos = start_pos  + 5
end_pos = start_pos + ncol(score_matrix) - 1
# return the seq name, start position, the p value, and the cutoff
return(c(seq_name, start_pos, center_pos, end_pos, score, pval, paste(test_motif, collapse = '')))})
# process the result into a dataframe
result <- as.data.frame(t(result), stringsAsFactors = F)
colnames(result) = c('seq_name', 'start_pos', 'center_pos', 'end_pos', 'pssm_score', 'pval', 'motif')
result[,c('start_pos', 'center_pos', 'end_pos', 'pssm_score', 'pval')] = apply(result[,c('start_pos', 'center_pos', 'end_pos', 'pssm_score', 'pval')], 2, as.numeric)
return(result)
}
# Chunk 6
# function that checks for overlap. 0 = none, 1 = partial, 2 = full
check_overlap <- function(start_pos, end_pos, start_NLS, end_NLS, NLS_name) {
# use difference in start and end positions to determine extent of overlap
diffs = c(start_pos - start_NLS, end_pos - end_NLS)
# complete overlap results in start_pos - start_NLS AND end_pos - end_NLS having different signs (one positive and one negative) or in one of them being 0
if((0 %in% diffs) | (diffs[1] > 0 & diffs[2] < 0) | (diffs[1] < 0 & diffs[2] > 0)) {return(c(NLS_name, 2))
# no overlap results in one of the start positions being greater than the other end position
} else if((start_pos > end_NLS) | (start_NLS > end_pos)) {return(c(NA, 0))
# if overlap is not complete or not non-existent, it must be partial!
} else { return(c(NLS_name,1))}
}
# function that calculates the extent of overlap, with maximum = 100% of possible
calculate_overlap <- function(start_pos, end_pos, start_NLS, end_NLS) {
if((start_pos > end_NLS) | (start_NLS > end_pos)) {return(0)} else {
max_overlap = min(c((end_pos - start_pos), (end_NLS - start_NLS))) # calculate the maximum possible overlap
all_positions = c(start_pos, end_pos, start_NLS, end_NLS)
all_positions = all_positions[order(all_positions)]
middle_positions = all_positions[2:3]
actual_overlap = abs(diff(middle_positions))
return(actual_overlap / max_overlap)}
}
# Chunk 7
# annotate each potential motif with position-wise scores
get_position_scores = function(motif, score_matrix) {
motifsplt = unlist(strsplit(as.character(motif), split = ''))
output = sapply(seq(1, length(motifsplt)), function(i) score_matrix[motifsplt[i], i])
return(output)
}
# Chunk 8
# check a for the canonical K/R, K/R, X, K/R motif.
check_for_motif <- function(aa, NLS_start, NLS_end,motif = "K,K/R,X,K/R", return_startstop = F) {
# split seq into individual characters
seq = unlist(substr(aa, NLS_start, NLS_end))
motif = unlist(strsplit(motif, split = ','))
motif = lapply(motif, function(motif_letter) strsplit(motif_letter, split = ''))
motif_length = length(motif)
# if the seq length is less than 4, take two amino acids on each side of it
if(nchar(seq) < 4) {
NLS_start = NLS_start - 2
NLS_end = NLS_end + 2
seq = unlist(substr(aa, NLS_start, NLS_end))
}
seq = unlist(strsplit(seq, ''))
# go through the sequence indices
matches = sapply(seq(1, length(seq) - length(motif) + 1, 1), function(i) { # iterate through indices from 1 to k positions from the end of the sequence, where k is the length of the motif
# initialize index for motif (j)
motif_matches = T
j = 1
while(motif_matches){
# if the motif letter is "X", it can be anything, so return T
if(!(seq[i] %in% unlist(motif[j])) & motif[j][[1]] != 'X') {
motif_matches = F
return(F)
} else {
if(j == length(motif)) {return(T)} # if end of motif has been reached, it is a full match and return T
j = j + 1
i = i + 1
}
}
})
# finally, return whether any matches occured
if(return_startstop) {
if(sum(matches) == 1) {  # this means that only one match occurred
start_NLS = which(matches)
end_NLS = start_NLS + motif_length - 1
output = c(start_NLS, end_NLS)
} else if(!any(matches)) {  # this means no matches were found
output = c(NA, NA)
} else if(sum(matches > 1)) { # if there are more matches than characters in the motif, then multiple NLS's were found
print('Error: mutliple instances of NLS found.')
print(which(matches))
print(sum(matches))
}
} else {
output = any(matches)
}
return(output)
}
# Chunk 9
# given a dataframe of uniprotid ids and scores, provides ranks for a given uniprot id for a given score column
get_ranks_single_id <- function(uniprotid, all_data, score_column = 'predicted_plogis') {
subdf = all_data[which(all_data$seq_name == uniprotid),]
NLSs = unique(subdf$NLS_name)
NLSs = NLSs[which(!is.na(NLSs))]
final_output = bind_rows(lapply(NLSs, function(NLS) {
subdf = subdf[order(subdf[,score_column], decreasing = T),]
rank = min(which(subdf$any_overlap & subdf$NLS_name == NLS))
output = data.frame(uniprotid = uniprotid,
NLS_name = NLS,
motif_start = subdf[rank, 'start_pos'],
motif_end = subdf[rank, 'end_pos'],
seq = subdf[rank,'motif'],
score = subdf[rank,score_column],
rank = rank,
perc = rank / nrow(subdf),
prop_overlap = subdf[rank, 'prop_overlap'],
stringsAsFactors = F
)
return(output)
}))
return(final_output)
}
## get ndata dataframe annotated with the rank of the top-ranking, overlapping
get_min_ranks_NLS <- function(all_data, ndata = NULL, score_col) {
ranks_score <- bind_rows(lapply(unique(as.character(all_data$seq_name)), function(uniprotid) {
return(get_ranks_single_id(uniprotid = uniprotid,
all_data = all_data,
score_col = score_col
))}))
if(!is.null(ndata)){ranks_score <- merge(ranks_score, ndata, by = 'NLS_name')}
return(ranks_score)
}
# Chunk 10
compute_prediction_df <- function(pdata,
score_matrix,
#raw_score_matrix = NULL,
ndata = NULL) {
## (1) CREATE AND PROCESS random sequence scores (for p values)
# check background distribution using 1000 random sequences
background = as.data.frame(t(replicate(10000, {
# pick 11 random amino acids
rows = sample(seq(1,20), 11)
seq = paste(score_matrix$mt_aa[rows], collapse = '')
# calculate the score matrix
score = sum(sapply(seq(1,11), function(pos) score_matrix[rows[pos], pos]))
return(c(seq, score))
})), stringsAsFactors = F)
# change column names
colnames(background) = c('seq', 'pwm_score')
# change pwm_score to numeric
background$pwm_score = as.numeric(background$pwm_score)
## (2) CALCULATE SCORES
motif_scores = lapply(seq(1, nrow(pdata), 1), function(i) score_protein_seq(seq_name = pdata[i,'uniprotid'],
input_seq = pdata[i,'aa'],
score_matrix = score_matrix,
background_values = background$pwm_score))
## (3) ANNOTATE POSITION PREFERENCES
motif_scores = lapply(motif_scores, function (df){
training_pos_scores = sapply(df$motif, function(motif) get_position_scores(motif, score_matrix))
training_pos_scores = as.data.frame(t(training_pos_scores))
colnames(training_pos_scores) = sapply(seq(1,11), function(n) paste0('pos', n))
motif_scores = cbind(df, training_pos_scores)
})
names(motif_scores) = pdata$uniprotid
## (4) ANNOTATE OVERLAP WITH KNOWN NLS, FOUND IN NDATA OBJECT
# apply the function to each motif_scores output
## if the protein has multiple NLS, need to keep this in mind
## also, annotate the NLS name of the identified NLS
if(!is.null(ndata)) {
motif_scores = lapply(names(motif_scores), function(uniprotid) {
print(paste0('Annotating overlap of sliding window for ', uniprotid, '..'))
# retrieve NLS start and end positions
NLS_start.s = as.numeric(ndata[which(ndata$uniprotid == uniprotid),'NLS_start'])
NLS_end.s = as.numeric(ndata[which(ndata$uniprotid == uniprotid),'NLS_end'])
NLS_name.s = as.character(ndata[which(ndata$uniprotid == uniprotid),'NLS_name'])
# determine what motifs overlap with NLSs
overlap_dfs = lapply(seq(1, length(NLS_start.s)), function(j) { # make list of dfs for the protein, one for each annotated NLS
df = as.data.frame(t(apply(motif_scores[uniprotid][[1]], 1, function(row) check_overlap(
start_pos = as.numeric(row['start_pos']),
end_pos   = as.numeric(row['end_pos']),
start_NLS = NLS_start.s[j],
end_NLS   = NLS_end.s[j],
NLS_name = NLS_name.s[j]))), stringsAsFactors = F)
colnames(df) = c('NLS_name', 'overlap')
df$NLS_name = as.character(df$NLS_name)
df$overlap = as.numeric(df$overlap)
return(df)
})
# reduce the list of dataframes to one vector using the MAX function
overlap = sapply(seq(1, nrow(overlap_dfs[[1]])), function(i) {max(unlist(lapply(overlap_dfs, function(j) j[i,'overlap'])))})
NLS_name = sapply(seq(1, nrow(overlap_dfs[[1]])), function(i) {
max_overlap = max(unlist(lapply(overlap_dfs, function(j) j[i,'overlap']))) # find the motif dataframe with max overlap at position i
overlap_df = which(lapply(overlap_dfs, function(j) j[i,'overlap']) == max_overlap) # grab that dataframe
if(length(overlap_df) > 1) {overlap_df = overlap_df[1]} # if equal overlap for two motifs for each, just pick the first one
return(overlap_dfs[[overlap_df]][i,'NLS_name']) # return the motif name at position i for that dataframe
})
prop_overlap_vecs = lapply(seq(1, length(NLS_start.s)), function(j) {
as.numeric(apply(motif_scores[uniprotid][[1]], 1, function(row) calculate_overlap(
start_pos = as.numeric(row['start_pos']),
end_pos = as.numeric(row['end_pos']),
start_NLS = NLS_start.s[j],
end_NLS = NLS_end.s[j]
)))})
# reduce the list of vectors to one vector using the MAX function
prop_overlap = sapply(seq(1, length(prop_overlap_vecs[[1]])), function(i) max(sapply(prop_overlap_vecs, function(j) j[i])))
out_df = motif_scores[uniprotid][[1]]
out_df$overlap = unlist(overlap)
out_df$prop_overlap = unlist(prop_overlap)
out_df$NLS_name = unlist(NLS_name)
return(out_df)
})
names(motif_scores) = pdata$uniprotid
}
## (5) COLLATE DATA INTO A SINGLE DATAFRAME AND RETURN
if(!is.null(ndata)) {
all_data = bind_rows(motif_scores)
all_data$any_overlap <- all_data$overlap > 0
all_data$mostly_overlapping <- all_data$prop_overlap > 0.50
all_data$complete_overlap <- all_data$prop_overlap == 1
} else {
all_data = bind_rows(motif_scores)
}
# add raw SCORES
#if(!(is.null(raw_score_matrix))){    # if the raw_score_matrix is given, calculate raw scores
#raw_motif_scores = as.data.frame(bind_rows(lapply(seq(1, nrow(pdata), 1), function(i) score_protein_seq(seq_name = pdata[i,'uniprotid'],
#input_seq = pdata[i,'aa'],
#score_matrix = raw_score_matrix,
#background_values = background$pwm_score))), stringsAsFactors = F)
#all_data$raw_score = raw_motif_scores$pssm_score}
return(all_data) }
# Chunk 11
# a function that plots a specific set of proteins, given by uniprot vector
plot_specific <- function(training_df, uniprot_vector, ndata, ncol, to_plot) {
# prep location of
subset = training_df[which(training_df$seq_name %in% uniprot_vector),]
motif_df = melt(unique(ndata[which(ndata$uniprotid %in% uniprot_vector),c('uniprotid', 'NLS_seq', 'NLS_start', 'NLS_end'),]), id.vars = c('uniprotid','NLS_seq'), value.name = 'x') # get NLS start and end values
num_nls = nrow(motif_df) / 2
motif_df = motif_df[rep(1:nrow(motif_df), each = 2),]
motif_df$y = c(rep(c(Inf, -Inf), num_nls), rep(c(-Inf, Inf), num_nls))
colnames(motif_df) = c('seq_name', 'nls_seq', 'pos', 'x', 'y')
# NLS sequence location
## include function that iterates through
ann_df = ndata[which(ndata$uniprotid %in% uniprot_vector),c('uniprotid', 'NLS_seq')]
colnames(ann_df) = c('seq_name', 'nls_seq')
ann_df = ann_df[order(ann_df$seq_name),]
ann_df$nls_ann = unlist(lapply(unique(ann_df$seq_name), function(uniprotid) {
subdf = ann_df[which(ann_df$seq_name == uniprotid),]
annotation = unlist(sapply(seq(1, nrow(subdf)), function(i) paste0(rep('\n', i-1), 'NLS', i, ':', subdf[i,'nls_seq'])))
return(annotation)
}
))
ggplot(subset) + geom_line(aes_string(x = 'center_pos', group = 'seq_name', y = to_plot)) + facet_wrap(~seq_name, ncol = 3) + geom_polygon(data = motif_df, aes(x = x, y = y, group = nls_seq), fill = '#fc8d59', alpha = 0.5) + geom_text(data = ann_df, y = Inf, x = 0, hjust= 0, vjust = 1, aes(label = nls_ann))
}
# Chunk 12: test
humanUp <- UniProt.ws(9606) # set up UniProt web services
human_ensembl = useMart("ensembl")
human_ensembl = useDataset("hsapiens_gene_ensembl",
mart = human_ensembl)
# get proteome sequences
proteome = read.fasta(file = '../data/uniprot-proteome_UP000005640_reviewed.FASTA', seqtype='AA', as.string=T)
proteome_df = data.frame(uniprotid = sapply(names(proteome), function(x) {unlist(strsplit(x, '\\|'))[[2]]}),
aa = sapply(proteome, function(x) x[[1]]),
stringsAsFactors = F)
# Chunk 13
# load preferences ('score matrix')
scores = read.csv('../data/preference_scores_scaled.csv')
score_matrix = dcast(scores, mt_aa ~ aa_pos, value.var = 'aa_pref')  #cast into matrix
row.names(score_matrix) = score_matrix$mt_aa # clean up
score_matrix = score_matrix[,which(colnames(score_matrix) != 'mt_aa')]
score_matrix
scores$mt_aa = factor(scores$mt_aa, levels = c('Y', 'W', 'F', 'V', 'P', 'L', 'I', 'G', 'A', 'T', 'S', 'Q', 'N', 'M', 'C', 'E', 'D', 'R', 'K', 'H'), ordered = T)
ggplot(scores, aes(x = aa_pos, y = mt_aa, fill = aa_pref)) +
geom_tile(color = 'black', size = 0.5) +
scale_fill_viridis_c() +
theme_classic() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14, angle = 45, hjust = 1),
legend.position = 'bottom') +
ylab('Mutant Amino Acid') +
xlab('Position') +
labs(fill="Preference")
ggsave('preference_matrix.png', width = 3.5, height = 6, dpi = 900)
# Chunk 14
## get sequence data for human proteins
UPids = c('P03070', 'P01106', 'P35680', 'Q06547', 'P03466')
pdata_monopartite = UniProt.ws::select(humanUp,
keys = UPids,
columns = 'SEQUENCE',
kt = 'UNIPROTKB')
colnames(pdata_monopartite) = c('uniprotid', 'aa')
# add SV40 NLS sequence information
pdata_monopartite[1,'aa'] = "MDKVLNREESLQLMDLLGLERSAWGNIPLMRKAYLKKCKEFHPDKGGDEEKMKKMNTLYKKMEDGVKYAHQPDFGGFWDATEIPTYGTDEWEQWWNAFNEENLFCSEEMPSSDDEATADSQHSTPPKKKRKVEDPKDFPSELLSFLSHAVFSNRTLACFAIYTTKEKAALLYKKIMEKYSVTFISRHNSYNHNILFFLTPHRHRVSAINNYAQKLCTFSFLICKGVNKEYLMYSALTRDPFSVIEESLPGGLKEHDFNPEEAEETKQVSWKLVTEYAMETKCDDVLLLLGMYLEFQYSFEMCLKCIKKEQPSHYKYHEKHYANAAIFADSKNQKTICQQAVDTVLAKKRVDSLQLTREQMLTNRFNDLLDRMDIMFGSTGSADIEEWMAGVAWLHCLLPKMDSVVYDFLKCMVYNIPKKRYWLFKGPIDSGKTTLAAALLELCGGKALNVNLPLDRLNFELGVAIDQFLVVFEDVKGTGGESRDLPSGQGINNLDNLRDYLDGSVKVNLEKKHLNKRTQIFPPGIVTMNEFSVPKTLQARFVKQIDFRAKDYLKHCLERSEFLLEKRIIQSGIALLLMLIWYRPVAEFAQSIQSRIVEWKERLDKEFSLSVYQKMKFNVAMGIGVLDWLRNSDDDDEDSQENADKNEDGGEKNMEDSGHETGIDSQSQGSFQAPQSSQSVHDHNQPYHICRGFTCFKKPPTPPPEPET"
# prepare NLS data
ndata_monopartite = data.frame(uniprotid = UPids,
NLS_start = c(125, 320, 229, 323, 1),
NLS_end = c(132, 328, 235, 333, 18),
NLS_name = sapply(pdata_monopartite$uniprotid, function(upid) paste0(unlist(upid), '_1'))
)
ndata_monopartite$NLS_seq = apply(ndata_monopartite, 1, function(row) {
splt_aa = unlist(strsplit(pdata_monopartite[which(pdata_monopartite$uniprotid == row['uniprotid']), 'aa'], ''))
return(paste0(unlist(splt_aa[as.numeric(row['NLS_start']) : as.numeric(row['NLS_end'])]), collapse = ''))
})
# create dataframe
scores_monopartite_df = compute_prediction_df(pdata_monopartite, score_matrix, ndata_monopartite)
# plot proteins
plot_specific(scores_monopartite_df, UPids, ndata_monopartite, 1, 'pssm_score')
# what is the other NLS found in P35680? it has a sequence of "LSHGSPHHQPS" --> no lysine or arginines??
scores_monopartite_df[order(scores_monopartite_df$pssm_score),]
## get sequence data for human proteins
UPids = c('P03070', 'P01106', 'P35680', 'Q06547', 'P03466')
pdata_monopartite = UniProt.ws::select(humanUp,
keys = UPids,
columns = 'SEQUENCE',
kt = 'UNIPROTKB')
colnames(pdata_monopartite) = c('uniprotid', 'aa')
# add SV40 NLS sequence information
pdata_monopartite[1,'aa'] = "MDKVLNREESLQLMDLLGLERSAWGNIPLMRKAYLKKCKEFHPDKGGDEEKMKKMNTLYKKMEDGVKYAHQPDFGGFWDATEIPTYGTDEWEQWWNAFNEENLFCSEEMPSSDDEATADSQHSTPPKKKRKVEDPKDFPSELLSFLSHAVFSNRTLACFAIYTTKEKAALLYKKIMEKYSVTFISRHNSYNHNILFFLTPHRHRVSAINNYAQKLCTFSFLICKGVNKEYLMYSALTRDPFSVIEESLPGGLKEHDFNPEEAEETKQVSWKLVTEYAMETKCDDVLLLLGMYLEFQYSFEMCLKCIKKEQPSHYKYHEKHYANAAIFADSKNQKTICQQAVDTVLAKKRVDSLQLTREQMLTNRFNDLLDRMDIMFGSTGSADIEEWMAGVAWLHCLLPKMDSVVYDFLKCMVYNIPKKRYWLFKGPIDSGKTTLAAALLELCGGKALNVNLPLDRLNFELGVAIDQFLVVFEDVKGTGGESRDLPSGQGINNLDNLRDYLDGSVKVNLEKKHLNKRTQIFPPGIVTMNEFSVPKTLQARFVKQIDFRAKDYLKHCLERSEFLLEKRIIQSGIALLLMLIWYRPVAEFAQSIQSRIVEWKERLDKEFSLSVYQKMKFNVAMGIGVLDWLRNSDDDDEDSQENADKNEDGGEKNMEDSGHETGIDSQSQGSFQAPQSSQSVHDHNQPYHICRGFTCFKKPPTPPPEPET"
pdata_monopartite[5,'aa'] = 'MASQGTKRSYEQMETDGERQNATEIRASVGKMIGGIGRFYIQMCTELKLSDYEGRLIQNSLTIERMVLSAFDERRNKYLEEHPSAGKDPKKTGGPIYRRVNGKWMRELILYDKEEIRRIWRQANNGDDATAGLTHMMIWHSNLNDATYQRTRALVRTGMDPRMCSLMQGSTLPRRSGAAGAAVKGVGTMVMELVRMIKRGINDRNFWRGENGRKTRIAYERMCNILKGKFQTAAQKAMMDQVRESRNPGNAEFEDLTFLARSALILRGSVAHKSCLPACVYGPAVASGYDFEREGYSLVGIDPFRLLQNSQVYSLIRPNENPAHKSQLVWMACHSAAFEDLRVLSFIKGTKVLPRGKLSTRGVQIASNENMETMESSTLELRSRYWAIRTRSGGNTNQQRASAGQISIQPTFSVQRNLPFDRTTIMAAFNGNTEGRTSDMRTEIIRMMESARPEDVSFQGRGVFELSDEKAASPIVPSFDMSNEGSYFFGDNAEEYDN'
# prepare NLS data
ndata_monopartite = data.frame(uniprotid = UPids,
NLS_start = c(125, 320, 229, 323, 1),
NLS_end = c(132, 328, 235, 333, 18),
NLS_name = sapply(pdata_monopartite$uniprotid, function(upid) paste0(unlist(upid), '_1'))
)
ndata_monopartite$NLS_seq = apply(ndata_monopartite, 1, function(row) {
splt_aa = unlist(strsplit(pdata_monopartite[which(pdata_monopartite$uniprotid == row['uniprotid']), 'aa'], ''))
return(paste0(unlist(splt_aa[as.numeric(row['NLS_start']) : as.numeric(row['NLS_end'])]), collapse = ''))
})
# create dataframe
scores_monopartite_df = compute_prediction_df(pdata_monopartite, score_matrix, ndata_monopartite)
# plot proteins
plot_specific(scores_monopartite_df, UPids, ndata_monopartite, 1, 'pssm_score')
# what is the other NLS found in P35680? it has a sequence of "LSHGSPHHQPS" --> no lysine or arginines??
scores_monopartite_df[order(scores_monopartite_df$pssm_score),]
load('temp3.RData')
pdata_virus = pdata_monopartite[c(1,5),]
virus_predictions = compute_prediction_df(pdata = pdata_virus, score_matrix = score_matrix)
head(pdata_virus)
pdata_monopartite[5,]
# add SV40 NLS sequence information
pdata_monopartite[1,'aa'] = "MDKVLNREESLQLMDLLGLERSAWGNIPLMRKAYLKKCKEFHPDKGGDEEKMKKMNTLYKKMEDGVKYAHQPDFGGFWDATEIPTYGTDEWEQWWNAFNEENLFCSEEMPSSDDEATADSQHSTPPKKKRKVEDPKDFPSELLSFLSHAVFSNRTLACFAIYTTKEKAALLYKKIMEKYSVTFISRHNSYNHNILFFLTPHRHRVSAINNYAQKLCTFSFLICKGVNKEYLMYSALTRDPFSVIEESLPGGLKEHDFNPEEAEETKQVSWKLVTEYAMETKCDDVLLLLGMYLEFQYSFEMCLKCIKKEQPSHYKYHEKHYANAAIFADSKNQKTICQQAVDTVLAKKRVDSLQLTREQMLTNRFNDLLDRMDIMFGSTGSADIEEWMAGVAWLHCLLPKMDSVVYDFLKCMVYNIPKKRYWLFKGPIDSGKTTLAAALLELCGGKALNVNLPLDRLNFELGVAIDQFLVVFEDVKGTGGESRDLPSGQGINNLDNLRDYLDGSVKVNLEKKHLNKRTQIFPPGIVTMNEFSVPKTLQARFVKQIDFRAKDYLKHCLERSEFLLEKRIIQSGIALLLMLIWYRPVAEFAQSIQSRIVEWKERLDKEFSLSVYQKMKFNVAMGIGVLDWLRNSDDDDEDSQENADKNEDGGEKNMEDSGHETGIDSQSQGSFQAPQSSQSVHDHNQPYHICRGFTCFKKPPTPPPEPET"
pdata_monopartite[5,'aa'] = 'MASQGTKRSYEQMETDGERQNATEIRASVGKMIGGIGRFYIQMCTELKLSDYEGRLIQNSLTIERMVLSAFDERRNKYLEEHPSAGKDPKKTGGPIYRRVNGKWMRELILYDKEEIRRIWRQANNGDDATAGLTHMMIWHSNLNDATYQRTRALVRTGMDPRMCSLMQGSTLPRRSGAAGAAVKGVGTMVMELVRMIKRGINDRNFWRGENGRKTRIAYERMCNILKGKFQTAAQKAMMDQVRESRNPGNAEFEDLTFLARSALILRGSVAHKSCLPACVYGPAVASGYDFEREGYSLVGIDPFRLLQNSQVYSLIRPNENPAHKSQLVWMACHSAAFEDLRVLSFIKGTKVLPRGKLSTRGVQIASNENMETMESSTLELRSRYWAIRTRSGGNTNQQRASAGQISIQPTFSVQRNLPFDRTTIMAAFNGNTEGRTSDMRTEIIRMMESARPEDVSFQGRGVFELSDEKAASPIVPSFDMSNEGSYFFGDNAEEYDN'
pdata_monopartite[5,'uniprotid'] = 'NP_Flu'
pdata_virus = pdata_monopartite[c(1,5),]
virus_predictions = compute_prediction_df(pdata = pdata_virus, score_matrix = score_matrix)
head(virus_predictions)
virus_predictions$position_weighted_score = stats::predict(glm_position_based_XV$model_all_data, virus_predictions)
head(virus_predictions)
View(virus_predictions)
View(virus_predictions)
pdata_virus = data.frame(uniprotid = c('P03211', 'P05928'),
aa = c('MSDEGPGTGPGNGLGEKGDTSGPEGSGGSGPQRRGGDNHGRGRGRGRGRGGGRPGAPGGSGSGPRHRDGVRRPQKRPSCIGCKGTHGGTGAGAGAGGAGAGGAGAGGGAGAGGGAGGAGGAGGAGAGGGAGAGGGAGGAGGAGAGGGAGAGGGAGGAGAGGGAGGAGGAGAGGGAGAGGGAGGAGAGGGAGGAGGAGAGGGAGAGGAGGAGGAGAGGAGAGGGAGGAGGAGAGGAGAGGAGAGGAGAGGAGGAGAGGAGGAGAGGAGGAGAGGGAGGAGAGGGAGGAGAGGAGGAGAGGAGGAGAGGAGGAGAGGGAGAGGAGAGGGGRGRGGSGGRGRGGSGGRGRGGSGGRRGRGRERARGGSRERARGRGRGRGEKRPRSPSSQSSSSGSPPRRPPPGRRPFFHPVGEADYFEYHQEGGPDGEPDVPPGAIEQGPADDPGEGPSTGPRGQGDGGRRKKGGWFGKHRGQGGSNPKFENIAEGLRALLARSHVERTTDEGTWVAGVFVYGGSKTSLYNLRRGTALAIPQCRLTPLSRLPFGMAPGPGPQPGPLRESIVCYFMVFLQTHIFAEVLKDAIKDLVMTKPAPTCNIRVTVCSFDDGVDLPPWFPPMVEGAAAEGDDGDDGDEGGDGDEGEEGQE',
'MEQAPEDQGPQREPHNEWTLELLEELKNEAVRHFPRIWLHGLGQHIYETYGDTWAGVEAI
IRILQQLLFIHFRIGCRHSRIGVTQQRRARNGASRS'))
virus_predictions = compute_prediction_df(pdata = pdata_virus, score_matrix = score_matrix)
virus_predictions$position_weighted_score = stats::predict(glm_position_based_XV$model_all_data, virus_predictions)
head(pdata_virus)
pdata_virus = data.frame(uniprotid = c('P03211', 'P05928'),
aa = c('MSDEGPGTGPGNGLGEKGDTSGPEGSGGSGPQRRGGDNHGRGRGRGRGRGGGRPGAPGGSGSGPRHRDGVRRPQKRPSCIGCKGTHGGTGAGAGAGGAGAGGAGAGGGAGAGGGAGGAGGAGGAGAGGGAGAGGGAGGAGGAGAGGGAGAGGGAGGAGAGGGAGGAGGAGAGGGAGAGGGAGGAGAGGGAGGAGGAGAGGGAGAGGAGGAGGAGAGGAGAGGGAGGAGGAGAGGAGAGGAGAGGAGAGGAGGAGAGGAGGAGAGGAGGAGAGGGAGGAGAGGGAGGAGAGGAGGAGAGGAGGAGAGGAGGAGAGGGAGAGGAGAGGGGRGRGGSGGRGRGGSGGRGRGGSGGRRGRGRERARGGSRERARGRGRGRGEKRPRSPSSQSSSSGSPPRRPPPGRRPFFHPVGEADYFEYHQEGGPDGEPDVPPGAIEQGPADDPGEGPSTGPRGQGDGGRRKKGGWFGKHRGQGGSNPKFENIAEGLRALLARSHVERTTDEGTWVAGVFVYGGSKTSLYNLRRGTALAIPQCRLTPLSRLPFGMAPGPGPQPGPLRESIVCYFMVFLQTHIFAEVLKDAIKDLVMTKPAPTCNIRVTVCSFDDGVDLPPWFPPMVEGAAAEGDDGDDGDEGGDGDEGEEGQE',
'MEQAPEDQGPQREPHNEWTLELLEELKNEAVRHFPRIWLHGLGQHIYETYGDTWAGVEAI
IRILQQLLFIHFRIGCRHSRIGVTQQRRARNGASRS'), stringsAsFactors = F)
virus_predictions = compute_prediction_df(pdata = pdata_virus, score_matrix = score_matrix)
virus_predictions$position_weighted_score = stats::predict(glm_position_based_XV$model_all_data, virus_predictions)
pdata_virus
apply(pdata_virus, 2, class)
head(pdata_monopartite)
pdata_virus = pdata_monopartite[c(1,5),]
pdata_virus[3] = c('P03211','MSDEGPGTGPGNGLGEKGDTSGPEGSGGSGPQRRGGDNHGRGRGRGRGRGGGRPGAPGGSGSGPRHRDGVRRPQKRPSCIGCKGTHGGTGAGAGAGGAGAGGAGAGGGAGAGGGAGGAGGAGGAGAGGGAGAGGGAGGAGGAGAGGGAGAGGGAGGAGAGGGAGGAGGAGAGGGAGAGGGAGGAGAGGGAGGAGGAGAGGGAGAGGAGGAGGAGAGGAGAGGGAGGAGGAGAGGAGAGGAGAGGAGAGGAGGAGAGGAGGAGAGGAGGAGAGGGAGGAGAGGGAGGAGAGGAGGAGAGGAGGAGAGGAGGAGAGGGAGAGGAGAGGGGRGRGGSGGRGRGGSGGRGRGGSGGRRGRGRERARGGSRERARGRGRGRGEKRPRSPSSQSSSSGSPPRRPPPGRRPFFHPVGEADYFEYHQEGGPDGEPDVPPGAIEQGPADDPGEGPSTGPRGQGDGGRRKKGGWFGKHRGQGGSNPKFENIAEGLRALLARSHVERTTDEGTWVAGVFVYGGSKTSLYNLRRGTALAIPQCRLTPLSRLPFGMAPGPGPQPGPLRESIVCYFMVFLQTHIFAEVLKDAIKDLVMTKPAPTCNIRVTVCSFDDGVDLPPWFPPMVEGAAAEGDDGDDGDEGGDGDEGEEGQE')
pdata_virus[4] = c('P05928',       'MEQAPEDQGPQREPHNEWTLELLEELKNEAVRHFPRIWLHGLGQHIYETYGDTWAGVEAI
IRILQQLLFIHFRIGCRHSRIGVTQQRRARNGASRS')
virus_predictions = compute_prediction_df(pdata = pdata_virus, score_matrix = score_matrix)
pdata_virus = pdata_monopartite[c(1,5),]
pdata_virus[3,] = c('P03211','MSDEGPGTGPGNGLGEKGDTSGPEGSGGSGPQRRGGDNHGRGRGRGRGRGGGRPGAPGGSGSGPRHRDGVRRPQKRPSCIGCKGTHGGTGAGAGAGGAGAGGAGAGGGAGAGGGAGGAGGAGGAGAGGGAGAGGGAGGAGGAGAGGGAGAGGGAGGAGAGGGAGGAGGAGAGGGAGAGGGAGGAGAGGGAGGAGGAGAGGGAGAGGAGGAGGAGAGGAGAGGGAGGAGGAGAGGAGAGGAGAGGAGAGGAGGAGAGGAGGAGAGGAGGAGAGGGAGGAGAGGGAGGAGAGGAGGAGAGGAGGAGAGGAGGAGAGGGAGAGGAGAGGGGRGRGGSGGRGRGGSGGRGRGGSGGRRGRGRERARGGSRERARGRGRGRGEKRPRSPSSQSSSSGSPPRRPPPGRRPFFHPVGEADYFEYHQEGGPDGEPDVPPGAIEQGPADDPGEGPSTGPRGQGDGGRRKKGGWFGKHRGQGGSNPKFENIAEGLRALLARSHVERTTDEGTWVAGVFVYGGSKTSLYNLRRGTALAIPQCRLTPLSRLPFGMAPGPGPQPGPLRESIVCYFMVFLQTHIFAEVLKDAIKDLVMTKPAPTCNIRVTVCSFDDGVDLPPWFPPMVEGAAAEGDDGDDGDEGGDGDEGEEGQE')
pdata_virus[4,] = c('P05928',       'MEQAPEDQGPQREPHNEWTLELLEELKNEAVRHFPRIWLHGLGQHIYETYGDTWAGVEAI
IRILQQLLFIHFRIGCRHSRIGVTQQRRARNGASRS')
virus_predictions = compute_prediction_df(pdata = pdata_virus, score_matrix = score_matrix)
virus_predictions = compute_prediction_df(pdata = pdata_virus[c(1,2,3)], score_matrix = score_matrix)
virus_predictions = compute_prediction_df(pdata = pdata_virus[c(1,2,3),], score_matrix = score_matrix)
pdata[4,]
pdata_virus[4,]
pdata_virus = pdata_monopartite[c(1,5),]
pdata_virus[3,] = c('P03211','MSDEGPGTGPGNGLGEKGDTSGPEGSGGSGPQRRGGDNHGRGRGRGRGRGGGRPGAPGGSGSGPRHRDGVRRPQKRPSCIGCKGTHGGTGAGAGAGGAGAGGAGAGGGAGAGGGAGGAGGAGGAGAGGGAGAGGGAGGAGGAGAGGGAGAGGGAGGAGAGGGAGGAGGAGAGGGAGAGGGAGGAGAGGGAGGAGGAGAGGGAGAGGAGGAGGAGAGGAGAGGGAGGAGGAGAGGAGAGGAGAGGAGAGGAGGAGAGGAGGAGAGGAGGAGAGGGAGGAGAGGGAGGAGAGGAGGAGAGGAGGAGAGGAGGAGAGGGAGAGGAGAGGGGRGRGGSGGRGRGGSGGRGRGGSGGRRGRGRERARGGSRERARGRGRGRGEKRPRSPSSQSSSSGSPPRRPPPGRRPFFHPVGEADYFEYHQEGGPDGEPDVPPGAIEQGPADDPGEGPSTGPRGQGDGGRRKKGGWFGKHRGQGGSNPKFENIAEGLRALLARSHVERTTDEGTWVAGVFVYGGSKTSLYNLRRGTALAIPQCRLTPLSRLPFGMAPGPGPQPGPLRESIVCYFMVFLQTHIFAEVLKDAIKDLVMTKPAPTCNIRVTVCSFDDGVDLPPWFPPMVEGAAAEGDDGDDGDEGGDGDEGEEGQE')
pdata_virus[4,] = c('P05928',       'MEQAPEDQGPQREPHNEWTLELLEELKNEAVRHFPRIWLHGLGQHIYETYGDTWAGVEAIIRILQQLLFIHFRIGCRHSRIGVTQQRRARNGASRS')
virus_predictions = compute_prediction_df(pdata = pdata_virus[c(1,2,3),], score_matrix = score_matrix)
virus_predictions$position_weighted_score = stats::predict(glm_position_based_XV$model_all_data, virus_predictions)
View(virus_predictions)
virus_predictions = compute_prediction_df(pdata = pdata_virus, score_matrix = score_matrix)
virus_predictions$position_weighted_score = stats::predict(glm_position_based_XV$model_all_data, virus_predictions)
View(virus_predictions)
pdata_presentation = data.frame(uniprot_id = c('SV40 NLS', 'DUT NLS'),
aa = c("MDKVLNREESLQLMDLLGLERSAWGNIPLMRKAYLKKCKEFHPDKGGDEEKMKKMNTLYKKMEDGVKYAHQPDFGGFWDATEIPTYGTDEWEQWWNAFNEENLFCSEEMPSSDDEATADSQHSTPPKKKRKVEDPKDFPSELLSFLSHAVFSNRTLACFAIYTTKEKAALLYKKIMEKYSVTFISRHNSYNHNILFFLTPHRHRVSAINNYAQKLCTFSFLICKGVNKEYLMYSALTRDPFSVIEESLPGGLKEHDFNPEEAEETKQVSWKLVTEYAMETKCDDVLLLLGMYLEFQYSFEMCLKCIKKEQPSHYKYHEKHYANAAIFADSKNQKTICQQAVDTVLAKKRVDSLQLTREQMLTNRFNDLLDRMDIMFGSTGSADIEEWMAGVAWLHCLLPKMDSVVYDFLKCMVYNIPKKRYWLFKGPIDSGKTTLAAALLELCGGKALNVNLPLDRLNFELGVAIDQFLVVFEDVKGTGGESRDLPSGQGINNLDNLRDYLDGSVKVNLEKKHLNKRTQIFPPGIVTMNEFSVPKTLQARFVKQIDFRAKDYLKHCLERSEFLLEKRIIQSGIALLLMLIWYRPVAEFAQSIQSRIVEWKERLDKEFSLSVYQKMKFNVAMGIGVLDWLRNSDDDDEDSQENADKNEDGGEKNMEDSGHETGIDSQSQGSFQAPQSSQSVHDHNQPYHICRGFTCFKKPPTPPPEPET",
"MPCSEETPAISPSKRARPAEVGGMQLRFARLSEHATAPTRGSARAAGYDLYSAYDYTIPPMEKAVVKTDIQIALPSGCYGRVAPRSGLAAKHFIDVGAGVIDEDYRGNVGVVLFNFGKEKFEVKKGDRIAQLICERIFYPEIEEVQALDDTERGSGGFGSTGKN")
)
ndata_presentation = data.frame(uniprotid = c('SV40 Large TAg', 'DUT'),
NLS_start = c(125, 10),
NLS_end = c(132, 20),
NLS_name = c('SV40_NLS', 'DUT_NLS')
)
presentation_prediction_df <- compute_prediction_df(pdata = pdata_presentation, score_matrix = score_matrix, ndata = NULL)
pdata_presentation = data.frame(uniprot_id = c('SV40 NLS', 'DUT NLS'),
aa = c("MDKVLNREESLQLMDLLGLERSAWGNIPLMRKAYLKKCKEFHPDKGGDEEKMKKMNTLYKKMEDGVKYAHQPDFGGFWDATEIPTYGTDEWEQWWNAFNEENLFCSEEMPSSDDEATADSQHSTPPKKKRKVEDPKDFPSELLSFLSHAVFSNRTLACFAIYTTKEKAALLYKKIMEKYSVTFISRHNSYNHNILFFLTPHRHRVSAINNYAQKLCTFSFLICKGVNKEYLMYSALTRDPFSVIEESLPGGLKEHDFNPEEAEETKQVSWKLVTEYAMETKCDDVLLLLGMYLEFQYSFEMCLKCIKKEQPSHYKYHEKHYANAAIFADSKNQKTICQQAVDTVLAKKRVDSLQLTREQMLTNRFNDLLDRMDIMFGSTGSADIEEWMAGVAWLHCLLPKMDSVVYDFLKCMVYNIPKKRYWLFKGPIDSGKTTLAAALLELCGGKALNVNLPLDRLNFELGVAIDQFLVVFEDVKGTGGESRDLPSGQGINNLDNLRDYLDGSVKVNLEKKHLNKRTQIFPPGIVTMNEFSVPKTLQARFVKQIDFRAKDYLKHCLERSEFLLEKRIIQSGIALLLMLIWYRPVAEFAQSIQSRIVEWKERLDKEFSLSVYQKMKFNVAMGIGVLDWLRNSDDDDEDSQENADKNEDGGEKNMEDSGHETGIDSQSQGSFQAPQSSQSVHDHNQPYHICRGFTCFKKPPTPPPEPET",
"MPCSEETPAISPSKRARPAEVGGMQLRFARLSEHATAPTRGSARAAGYDLYSAYDYTIPPMEKAVVKTDIQIALPSGCYGRVAPRSGLAAKHFIDVGAGVIDEDYRGNVGVVLFNFGKEKFEVKKGDRIAQLICERIFYPEIEEVQALDDTERGSGGFGSTGKN")
, stringsAsFactors = F)
ndata_presentation = data.frame(uniprotid = c('SV40 Large TAg', 'DUT'),
NLS_start = c(125, 10),
NLS_end = c(132, 20),
NLS_name = c('SV40_NLS', 'DUT_NLS')
)
# make predictions
presentation_prediction_df <- compute_prediction_df(pdata = pdata_presentation, score_matrix = score_matrix, ndata = NULL)
pdata_presentation
pdata_monopartite
dim(pdata_monopartite)
length(not_nuc_cyto)
head(all_locs)
dim(all_locs)
all_locs
head(hpa_subcell$localization)
head(hpa_data)
all(hpa_data$Localization == "Nuclear")
hpa_subcell <- read.csv('../data/aal3321_Thul_SM_table_S6.csv')
hpa_subcell$Uniprot = as.character(hpa_subcell$Uniprot)
nuc_loc = c('Nucleus', 'Nucleoplasm', 'Nuclear.bodies', 'Nuclear.speckles', 'Nucleoli', "Nucleoli..Fibrillar.center.")
hpa_subcell$any_nucleus = apply(hpa_subcell[,nuc_loc], 1,
function(row) {
# if all values are 0, return 0
if(all(row == 0)) { return(F) } else {return(T)}
})
hpa_data = hpa_subcell[which(hpa_subcell$any_nucleus),c(1,2,3)]
dim(hpa_data)
dim(hpa_subcell)
hpa_subcell <- read.csv('../data/aal3321_Thul_SM_table_S6.csv')
hpa_subcell$Uniprot = as.character(hpa_subcell$Uniprot)
nuc_loc = c('Nucleus', 'Nucleoplasm', 'Nuclear.bodies', 'Nuclear.speckles', 'Nucleoli', "Nucleoli..Fibrillar.center.")
hpa_subcell$any_nucleus = apply(hpa_subcell[,nuc_loc], 1,
function(row) {
# if all values are 0, return 0
if(all(row == 0)) { return(F) } else {return(T)}
})
# get columns of interest
hpa_data = hpa_subcell[which(hpa_subcell$any_nucleus),c(1,2,3)]
# make a dataframe and retrieve sequences using the fasta files of the human proteome
hpa_data = merge(hpa_data[,c('ENSG','Gene','Uniprot')], proteome_df, by.x = 'Uniprot', by.y = 'uniprotid')
# remove rows for which a sequence could not be found
colnames(hpa_data) = c('uniprotid', 'ENSG', 'Gene', 'aa')
hpa_data$aa = unlist(hpa_data$aa)
hpa_data = hpa_data[which(!is.na(hpa_data$aa)),]
# remove rows containing any non-canonical amino acids (e.g. U)
passing_rows = which(sapply(hpa_data$aa, function(aa) all(unlist(strsplit(aa, '')) %in% c('R', 'H', 'K', 'D', 'E', 'S', 'T', 'N', 'Q', 'C', 'G', 'P', 'A', 'V', 'I', 'L', 'M', 'F', 'Y', 'W'))))
hpa_data = hpa_data[passing_rows,]
head(hpa_data)
dim(hpa_data)
dim(hpa_subcell)
# make predictions
hpa_data_prediction_df <- compute_prediction_df(pdata = hpa_data, score_matrix = score_matrix, ndata = NULL)
hpa_data_prediction_df <- merge(hpa_data_prediction_df, hpa_data[,c('uniprotid', 'Gene')], by.x = 'seq_name', by.y = 'uniprotid')
hpa_data_prediction_df$position_weighted_score = stats::predict(glm_position_based_XV$model_all_data, hpa_data_prediction_df)
# add high confidence vs. candidate NLS
hpa_data_prediction_df$prediction = '-'
hpa_data_prediction_df[which(hpa_data_prediction_df$position_weighted_score > candidate),'prediction'] = 'Candidate NLS'
hpa_data_prediction_df[which(hpa_data_prediction_df$position_weighted_score > high_confidence),'prediction'] = 'High confidence NLS'
# for each, designate as being noncanonical or not
## first, need to modify the annotation to include the sequence and rerun..!!
hpa_data_prediction_df$canonical_nls = NA
hpa_data_prediction_df[which(hpa_data_prediction_df$prediction != '-'),'canonical_nls'] = sapply(hpa_data_prediction_df[which(hpa_data_prediction_df$prediction != '-'),'motif'], function(x) check_for_motif(aa = x ,
NLS_start = 1,
NLS_end = 11,
motif = 'K,K/R,X,K/R'))
hpa_data_prediction_df_nls_candidates = hpa_data_prediction_df[which(hpa_data_prediction_df$prediction != '-'),]
sum(hpa_data_prediction_df_nls_candidates$prediction == 'Candidate NLS')
sum(hpa_data_prediction_df_nls_candidates$prediction == 'High confidence NLS')
sum(hpa_data_prediction_df_nls_candidates$prediction == 'High confidence NLS' & !(hpa_data_prediction_df_nls_candidates$canonical_nls))
sum(hpa_data_prediction_df_nls_candidates$prediction == 'Candidate NLS' & !(hpa_data_prediction_df_nls_candidates$canonical_nls))
write.csv(x = hpa_data_prediction_df_nls_candidates, file = 'Dataset_EV2.csv')
#save.image('temp2.RData')
nrow(hpa_data)
