'channel',
'obj',
'size',
'intensity'))
rep2 <- read.csv('../data/rep2.1.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep4.5 <-  read.csv('../data/rep4and5.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep7 <- read.csv('../data/rep7.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[5]])
})
# reshape but break up into manageable chunks
df_out <- bind_rows(lapply(seq(0, nrow(df), 100), function(y) {
reshape(df[y:min(y+100, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj'),
timevar = 'compartment',
direction = 'wide')}))
return(df_out)
}
preprocess(rep1)
library(dplyr)
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[5]])
})
# reshape but break up into manageable chunks
df_out <- bind_rows(lapply(seq(0, nrow(df), 100), function(y) {
reshape(df[y:min(y+100, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj'),
timevar = 'compartment',
direction = 'wide')}))
return(df_out)
}
head(preprocess(rep1))
time(preprocess(rep1))
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[5]])
})
# reshape but break up into manageable chunks
df_out <- bind_rows(lapply(seq(0, nrow(df), 50), function(y) {
reshape(df[y:min(y+50, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj'),
timevar = 'compartment',
direction = 'wide')}))
return(df_out)
}
head(preprocess(rep1))
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[5]])
})
# reshape but break up into manageable chunks
df_out <- bind_rows(lapply(seq(0, nrow(df), 100), function(y) {
reshape(df[y:min(y+100, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj'),
timevar = 'compartment',
direction = 'wide')}))
return(df_out)
}
all_reps <- lapply(list(rep1, rep2, rep4.5, rep7), preprocess)
head(allreps[[1]])
head(all_reps[[1]])
library(ggarrange)
install.packages('ggarrange')
BiocManager::install('ggarrange')
lapply(all_reps, function(x) {
ggplot(x, aes(x = max(intensity.NIR_and_cytoplasm, intensity.NIR_and_nucleus))) + geom_histogram(bins = 100) + facet_wrap(~well)
})
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[5]])
})
# reshape but break up into manageable chunks of 100 rows
df_out <- bind_rows(lapply(seq(0, nrow(df), 100), function(y) {
reshape(df[y:min(y+100, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj'),
timevar = 'compartment',
direction = 'wide')}))
# max compartment
df_out$max_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], max)
return(df_out)
}
all_reps <- lapply(list(rep1, rep2, rep4.5, rep7), preprocess)
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[5]])
})
# reshape but break up into manageable chunks of 100 rows
df_out <- bind_rows(lapply(seq(0, nrow(df), 100), function(y) {
reshape(df[y:min(y+100, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj'),
timevar = 'compartment',
direction = 'wide')}))
# max compartment
df_out$max_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, max)
return(df_out)
}
all_reps <- lapply(list(rep1, rep2, rep4.5, rep7), preprocess)
lapply(all_reps, function(x) {
ggplot(x, aes(x = max_nucleus_cytoplasm)) + geom_histogram(bins = 100) + facet_wrap(~well)
})
rep1 <- read.csv('../data/REP1.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep1$rep = 'REP1'
rep2 <- read.csv('../data/rep2.1.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep2$rep = 'REP2'
rep4.5 <-  read.csv('../data/rep4and5.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep4.5$rep = 'REP4.5'
rep7 <- read.csv('../data/rep7.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep7$rep = 'REP7'
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[5]])
})
# reshape but break up into manageable chunks of 100 rows
df_out <- bind_rows(lapply(seq(0, nrow(df), 100), function(y) {
reshape(df[y:min(y+100, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj'),
timevar = 'compartment',
direction = 'wide')}))
# max compartment
df_out$max_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, max)
return(df_out)
}
all_reps <- lapply(list(rep1, rep2, rep4.5, rep7), preprocess)
?quantile
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[5]])
})
# reshape but break up into manageable chunks of 100 rows
df_out <- bind_rows(lapply(seq(0, nrow(df), 100), function(y) {
reshape(df[y:min(y+100, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj'),
timevar = 'compartment',
direction = 'wide')}))
# max compartment
df_out$max_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, max)
df_out$min_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, min)
# use bottom 5% of cells to estimate background
background_df = as.data.frame(t(apply(unique(df_out$well), 1, function(y) {
subset = df_out[which(df_out$well == y),]
q05 = quantile(subset$min_nucleus_cytoplasm, 0.05)
return(c(y, background))
}))) ; colnames(background_df) = c('well', 'background')
df_out = merge(df_out, background_df, by = 'well') # merge the background df with the original
return(df_out)
}
all_reps <- lapply(list(rep1, rep2, rep4.5, rep7), preprocess)
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[5]])
})
# reshape but break up into manageable chunks of 100 rows
df_out <- bind_rows(lapply(seq(0, nrow(df), 100), function(y) {
reshape(df[y:min(y+100, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj'),
timevar = 'compartment',
direction = 'wide')}))
# max compartment
df_out$max_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, max)
df_out$min_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, min)
# use bottom 5% of cells to estimate background
print(unique(df_out$well))
background_df = as.data.frame(t(apply(unique(df_out$well), 1, function(y) {
subset = df_out[which(df_out$well == y),]
q05 = quantile(subset$min_nucleus_cytoplasm, 0.05)
return(c(y, background))
}))) ; colnames(background_df) = c('well', 'background')
df_out = merge(df_out, background_df, by = 'well') # merge the background df with the original
return(df_out)
}
all_reps <- lapply(list(rep1, rep2, rep4.5, rep7), preprocess)
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[5]])
})
# reshape but break up into manageable chunks of 100 rows
df_out <- bind_rows(lapply(seq(0, nrow(df), 100), function(y) {
reshape(df[y:min(y+100, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj'),
timevar = 'compartment',
direction = 'wide')}))
# max compartment
df_out$max_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, max)
df_out$min_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, min)
# use bottom 5% of cells to estimate background
print(unique(df_out$well))
background_df = as.data.frame(t(sapply(unique(df_out$well), 1, function(y) {
subset = df_out[which(df_out$well == y),]
q05 = quantile(subset$min_nucleus_cytoplasm, 0.05)
return(c(y, background))
}))) ; colnames(background_df) = c('well', 'background')
df_out = merge(df_out, background_df, by = 'well') # merge the background df with the original
return(df_out)
}
all_reps <- lapply(list(rep1, rep2, rep4.5, rep7), preprocess)
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[5]])
})
# reshape but break up into manageable chunks of 100 rows
df_out <- bind_rows(lapply(seq(0, nrow(df), 100), function(y) {
reshape(df[y:min(y+100, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj'),
timevar = 'compartment',
direction = 'wide')}))
# max compartment
df_out$max_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, max)
df_out$min_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, min)
# use bottom 5% of cells to estimate background
print(unique(df_out$well))
background_df = as.data.frame(t(sapply(unique(df_out$well), function(y) {
subset = df_out[which(df_out$well == y),]
q05 = quantile(subset$min_nucleus_cytoplasm, 0.05)
return(c(y, background))
}))) ; colnames(background_df) = c('well', 'background')
df_out = merge(df_out, background_df, by = 'well') # merge the background df with the original
return(df_out)
}
all_reps <- lapply(list(rep1, rep2, rep4.5, rep7), preprocess)
library(array)
BiocManager::install('array')
install.packages('array')
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(spdep)
load_all('C:/bin/monocle3/')
#load_all('Z:/home/haslen/bin/monocle3/')
library(monocle3)
#BiocManager::install('BiocSingular')
load_all('C:/bin/batchelor/')
#load_all('Z:/home/haslen/bin/batchelor/')
library(batchelor)
library(Seurat)
library(monocle)
library(scran)
library(scRNAseq)
library(SingleCellExperiment)
library(scater)
library(ggpubr)
library(AUC)
library(piano)
library(slam)
library(MASS)
# load cds
cds = read.matrix('celseq_matrix_ru10_molecules.tsv.725585', sep = '\t', row.names = 1))
# load cds
cds = read.matrix('celseq_matrix_ru10_molecules.tsv.725585', sep = '\t', row.ids = 1, heeader = T)
?readMM
install.packages('futile.matrix')
# load cds
cds = futile.matrixe::read.matrix('celseq_matrix_ru10_molecules.tsv.725585', sep = '\t', row.ids = 1, heeader = T)
# load cds
cds = futile.matrix::read.matrix('celseq_matrix_ru10_molecules.tsv.725585', sep = '\t', row.ids = 1, heeader = T)
?read.matrix
# load cds
cds = futile.matrix::read.matrix('celseq_matrix_ru10_molecules.tsv.725585', sep = '\t', row.ids = 1, header = T)
# load cds
cds = futile.matrix::read.matrix('celseq_matrix_ru10_molecules.tsv.725585', sep = '\t', row.ids = 1, header = T)
# load cds
cds = read.csv('celseq_matrix_ru10_molecules.tsv.725585', sep = '\t', row.names = 1, header = T)
ncol(cds)
cds <- Matrix::Matrix(cds, ncol = ncol(cds), sparse = T)
cds[1:10,1:10]
cds[cds==NA] <- 0
cds[1:10,1:10]
cds[is.na(cds)] <- 0
cds[1:10,1:10]
cds <- Matrix::Matrix(cds, ncol = ncol(cds), sparse = T)
cds <- Matrix::Matrix(as.matrix(cds), ncol = ncol(cds), sparse = T)
dim(cds)
cds[1:10,1:10]
head(colnames(cds))
View(cds)
View(cds)
# prep phenodata
pheno = read.csv('celseq_matrix_ru10_reads.tsv.725590', sep = '\t')
dim(pheno)
pheno[1:10,1:10]
rm(pheno)
# get metadata
meta <- read.csv('celseq_meta.tsv.725591')
dim(meta)
# get metadata
meta <- read.csv('celseq_meta.tsv.725591', sep = '\t')
dim(meta)
head(meta)
colnames(meta)
head(row.names(cds))
# reannotate phenodata with Seurat
cds <- new_cell_data_set(cds,
cell_metadata = meta[c(1:9, 20:34)],
gene_metadata = data.frame(gene_short_name = row.names(cds),
row.names = row.names(cds)))
head(meta)
# get metadata
meta <- read.csv('celseq_meta.tsv.725591', sep = '\t', row.names = 1)
# reannotate phenodata with Seurat
cds <- new_cell_data_set(cds,
cell_metadata = meta[c(1:9, 20:34)],
gene_metadata = data.frame(gene_short_name = row.names(cds),
row.names = row.names(cds)))
# reannotate phenodata with Seurat
cds <- new_cell_data_set(cds,
cell_metadata = meta[,c(1:9, 20:34)],
gene_metadata = data.frame(gene_short_name = row.names(cds),
row.names = row.names(cds)))
c(1:9, 20:34)
ncol(meta)
colnames(meta)
# reannotate phenodata with Seurat
cds <- new_cell_data_set(cds,
cell_metadata = meta[,c(1:9, 29:33)],
gene_metadata = data.frame(gene_short_name = row.names(cds),
row.names = row.names(cds)))
# preprocess data
cds  <- preprocess_cds(cds, num_dim = 100)
# UMAP
cds <- reduce_dimension(cds, reduction_method = 'UMAP')
# plot cells, color by sample
plot_cells(cds, color_cells_by = 'sample')
# plot cells, color by sample
plot_cells(cds, color_cells_by = 'sample', label_cell_groups = F)
head(meta)
# plot cells, color by sample
plot_cells(cds, color_cells_by = 'lane', label_cell_groups = F)
# plot cells, color by sample
plot_cells(cds, color_cells_by = 'plate', label_cell_groups = F)
# plot cells, color by sample
plot_cells(cds, color_cells_by = 'quadrant', label_cell_groups = F)
# plot cells, color by sample
plot_cells(cds, color_cells_by = 'well_384', label_cell_groups = F)
# plot cells, color by sample
plot_cells(cds, color_cells_by = 'well384', label_cell_groups = F)
# plot cells, color by sample
plot_cells(cds, color_cells_by = 'molecules', label_cell_groups = F)
colData(cds)$log10_molecules = log10(colData(cds)$molecules)
# plot cells, color by sample
plot_cells(cds, color_cells_by = 'molecules', label_cell_groups = F)
# plot cells, color by sample
plot_cells(cds, color_cells_by = 'molecules', label_cell_groups = F) + scale_color_viridis_c()
# plot cells, color by sample
plot_cells(cds, color_cells_by = 'log10_molecules', label_cell_groups = F) + scale_color_viridis_c()
# plot cells, color by sample
plot_cells(cds, color_cells_by = 'type', label_cell_groups = F) #+ scale_color_viridis_c()
# plot cells, color by sample
plot_cells(cds, color_cells_by = 'type', label_cell_groups = F) + facet_wrap(~disease) #+ scale_color_viridis_c()
save.image('zheng.RData')
library(devtools)
library(Matrix)
library(spdep)
load_all('C:/bin/monocle3/')
#load_all('Z:/home/haslen/bin/monocle3/')
library(monocle3)
#BiocManager::install('BiocSingular')
load_all('C:/bin/batchelor/')
#load_all('Z:/home/haslen/bin/batchelor/')
library(batchelor)
library(Seurat)
library(monocle)
library(scran)
library(scRNAseq)
library(SingleCellExperiment)
library(scater)
library(ggpubr)
library(AUC)
library(piano)
library(slam)
library(MASS)
library(dplyr)
source('GSA_hyper_helper_functions.R')
source('loadGSCSafe.R')
set.seed(9)
library(ggplot2)
library(bio3d)
library(UniProt.ws)
library(reshape2)
library(dplyr)
library(biomaRt)
library(seqinr)
setwd("D:/OneDrive - UW/PhD/Publications/VCS_2019/github_repo/vcs_2019/vcs_nls/nls_prediction/code")
load('train_test_model.RData')
