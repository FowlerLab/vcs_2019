se_NC = sd(log2medianNC),
meanscore = mean_scaled_score[1],
se_score = std_err_scaled_score[1],
variant = X[1],
ymin_err = mean(log2medianNC) - sd(log2medianNC),
ymax_err = mean(log2medianNC) + sd(log2medianNC),
xmin_err = mean_scaled_score[1] - std_err_scaled_score[1],
xmax_err = mean_scaled_score[1] + std_err_scaled_score[1])
corr_val = cor(final_plot$meanscore, final_plot$meanNC)^2
corr_val_lab = round(corr_val, 2)
print(corr_val_lab)
ylab = expression(Log["2"]*'(N:C)')
corr_val_annot = expression(r^2*' = '*0.91)
ggplot(final_plot, aes(x = meanscore, y = meanNC)) +
geom_errorbar(aes(ymin = ymin_err, ymax = ymax_err),
color = 'grey') +
geom_errorbarh(aes(xmin = xmin_err, xmax = xmax_err),
color = 'grey') +
geom_point() +
stat_smooth(method='lm',
se=F) +
theme_classic() +
annotate(x = -Inf,
y = Inf,
vjust = 2,
hjust = -0.25,
geom = 'text',
label = corr_val_annot,
size = 14*5/14) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16)) +
xlab('Localization score') +
ylab(ylab)
ggsave('F3A.png', dpi = 600, width = 3.1, height = 2.75)
data_3b <- summary[which(summary$mutant %in% c('Wild-Type', 'A2P', 'K4R', 'A2P K4R', 'A2P V9I', 'A2P K4R V9I')),]
data_3b_plot <- data_3b %>%
group_by(.dots=c("mutant")) %>%
summarize(mean = mean(medianNC),
ymin_se = mean(medianNC) - sd(medianNC),
ymax_se = mean(medianNC) + sd(medianNC))
data_3b_plot$mutant = factor(data_3b_plot$mutant,
levels = c('Wild-Type', 'A2P', 'K4R', 'A2P K4R', 'A2P V9I', 'A2P K4R V9I'),
order = order(data_3b_plot$mean))
ggplot(data_3b_plot, aes(x = mutant, y = mean)) +
geom_bar(stat='identity') +
geom_errorbar(aes(ymin = ymin_se,
ymax = ymax_se),
color = 'grey',
width = 0) +
theme_classic() +
theme(axis.text.x=element_text(size=14,
angle = 45,
hjust = 1),
axis.text.y=element_text(size=14),
axis.title=element_text(size=16)) +
xlab('Variant') +
ylab('N:C')
ggsave('F3B.png', dpi = 600, width = 2.750, height = 2.75)
# add in information about variants and cutoffs
all_reps_annot <- merge(all_reps, read.csv('variants_old.csv'), by.x = c('well', 'rep'), by.y = c('well', 'replicate'))
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP1'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(10000), linetype = 'dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP2'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~well) + geom_vline(xintercept = log10(10000), linetype = 'dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP4.5'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(5500), linetype='dashed')
head(all_reps_annot
)
all_reps_annot[which(all_reps_annot$rep == 'REP4.5'),]
library(ggplot2)
library(dplyr)
library(reshape2)
rep1 <- read.csv('../data_old/REP1.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep1$rep = 'REP1'
rep2 <- read.csv('../data_old/rep2.1.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep2$rep = 'REP2'
rep4.5 <-  read.csv('../data_old/rep4and5.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep4.5$rep = 'REP4.5'
rep7 <- read.csv('../data_old/rep7.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep7$rep = 'REP7'
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity','rep')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[4]])
})
# reshape but break up into manageable chunks of 100 rows
df_out <- bind_rows(lapply(seq(0, nrow(df), 100), function(y) {
reshape(df[y:min(y+100, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj','rep'),
timevar = 'compartment',
direction = 'wide')}))
# max compartment
df_out$max_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, max)
df_out$min_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, min)
# use bottom 5% of cells to estimate background
print(unique(df_out$well))
background_df = as.data.frame(t(sapply(unique(df_out$well), function(y) {
subset = df_out[which(df_out$well == y),]
q05 = quantile(subset$min_nucleus_cytoplasm, 0.10, na.rm = T)
return(c(y, q05))
}))) ; colnames(background_df) = c('well', 'background')
df_out = merge(df_out, background_df, by = 'well') # merge the background df with the original
# reset most things to numeric
df_out[,c('obj', 'site', 'intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus', 'max_nucleus_cytoplasm', 'min_nucleus_cytoplasm', 'background')] =
apply(
df_out[,c('obj', 'site', 'intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus', 'max_nucleus_cytoplasm', 'min_nucleus_cytoplasm', 'background')],
2,
as.numeric)
# subtract background from cytoplasm and nucleus
df_out$intensity.NIR_and_cytoplasm.corr = df_out$intensity.NIR_and_cytoplasm - df_out$background
df_out$intensity.NIR_and_nucleus.corr = df_out$intensity.NIR_and_nucleus - df_out$background
return(df_out)
}
all_reps <- bind_rows(lapply(list(rep1, rep2, rep4.5, rep7), preprocess))
# add in information about variants and cutoffs
all_reps_annot <- merge(all_reps, read.csv('variants_old.csv'), by.x = c('well', 'rep'), by.y = c('well', 'replicate'))
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP1'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(10000), linetype = 'dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP2'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~well) + geom_vline(xintercept = log10(10000), linetype = 'dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP4.5'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(5500), linetype='dashed')
head(all_reps)
df = rep7
df <- df[,c('compartment', 'well.site', 'obj', 'intensity','rep')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[4]])
})
head(df)
x = df$well.site[1]
x
split = strsplit(as.character(x), ' ')
split
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity','rep')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[5]])
})
# reshape but break up into manageable chunks of 100 rows
df_out <- bind_rows(lapply(seq(0, nrow(df), 100), function(y) {
reshape(df[y:min(y+100, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj','rep'),
timevar = 'compartment',
direction = 'wide')}))
# max compartment
df_out$max_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, max)
df_out$min_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, min)
# use bottom 5% of cells to estimate background
print(unique(df_out$well))
background_df = as.data.frame(t(sapply(unique(df_out$well), function(y) {
subset = df_out[which(df_out$well == y),]
q05 = quantile(subset$min_nucleus_cytoplasm, 0.10, na.rm = T)
return(c(y, q05))
}))) ; colnames(background_df) = c('well', 'background')
df_out = merge(df_out, background_df, by = 'well') # merge the background df with the original
# reset most things to numeric
df_out[,c('obj', 'site', 'intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus', 'max_nucleus_cytoplasm', 'min_nucleus_cytoplasm', 'background')] =
apply(
df_out[,c('obj', 'site', 'intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus', 'max_nucleus_cytoplasm', 'min_nucleus_cytoplasm', 'background')],
2,
as.numeric)
# subtract background from cytoplasm and nucleus
df_out$intensity.NIR_and_cytoplasm.corr = df_out$intensity.NIR_and_cytoplasm - df_out$background
df_out$intensity.NIR_and_nucleus.corr = df_out$intensity.NIR_and_nucleus - df_out$background
return(df_out)
}
all_reps <- bind_rows(lapply(list(rep1, rep2, rep4.5, rep7), preprocess))
nrow(all_reps)
sum(nrow(rep1) + nrow(rep2) + nrow(rep4.5) + nrow(rep7))
nrow(all_reps)*2
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP1'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(10000), linetype = 'dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP2'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~well) + geom_vline(xintercept = log10(10000), linetype = 'dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP4.5'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(5500), linetype='dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP4.5'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(5500), linetype='dashed')
# add in information about variants and cutoffs
all_reps_annot <- merge(all_reps, read.csv('variants_old.csv'), by.x = c('well', 'rep'), by.y = c('well', 'replicate'))
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP1'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(10000), linetype = 'dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP2'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~well) + geom_vline(xintercept = log10(10000), linetype = 'dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP4.5'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(5500), linetype='dashed')
unique(all_reps_annot$rep)
rep4.5 <-  read.csv('../data_old/rep4and5.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep4.5$rep = 'REP4.5'
head(rep4.5)
try2 <- preprocess(rep4.5)
head(try2)
unique(all_reps$rep)
# add in information about variants and cutoffs
all_reps_annot <- merge(all_reps, read.csv('variants_old.csv'), by.x = c('well', 'rep'), by.y = c('well', 'replicate'))
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP1'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(10000), linetype = 'dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP2'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~well) + geom_vline(xintercept = log10(10000), linetype = 'dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP4.5'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(5500), linetype='dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP7'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(well~mutant) + geom_vline(xintercept = log10(4000), linetype = 'dashed')
# function to remove cells with lowest 50% of maximum values
remove_dim <- function(df) {
return(df[which(df$max_nucleus_cytoplasm > unique(df$cutoff)),])
}
# get NCratios
all_reps_annot$NCratio <- all_reps_annot$intensity.NIR_and_nucleus.corr / all_reps_annot$intensity.NIR_and_cytoplasm.corr
# remove cells with the lowest 50% of maximum values
all_reps_filt <- all_reps_annot[which(!is.na(all_reps_annot$NCratio) &
is.finite(all_reps_annot$NCratio)),] %>%
do(remove_dim(.))
# filter cells that likely do not express miRFP
# group by well and replicate, then calculate median value
summary <- all_reps_filt[which(!is.na(all_reps_filt$NCratio) &
is.finite(all_reps_filt$NCratio)),] %>%
group_by(.dots=c("rep","well","mutant")) %>%
summarize(medianNC = median(NCratio), N = length(NCratio))
# plot median values
## highly variable need to filter based on histograms
ggplot(summary, aes(x = mutant, y = log2(medianNC), color = rep)) + geom_point() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) #+ scale_color_viridis_c() + stat_summary(fun.data = 'mean_cl_boot')
# plot variants against their score
variant_scores = read.csv('../../nls_scores/code/ST3.csv', stringsAsFactors = F)
variant_scores[which(variant_scores$X == '_wt'),'X'] = 'Wild-Type'
to_plot <- merge(variant_scores, summary, by.x = 'X', by.y = 'mutant')
to_plot$log2medianNC = log2(to_plot$medianNC)
ggplot(to_plot, aes(x = mean_scaled_score, y = log2medianNC)) + geom_point() + stat_summary(fun.y = 'mean', geom = 'point', color = 'blue', size = 2) + theme_classic()
final_plot <- to_plot %>%
group_by(.dots=c("X")) %>%
summarize(meanNC = mean(log2medianNC),
se_NC = sd(log2medianNC),
meanscore = mean_scaled_score[1],
se_score = std_err_scaled_score[1],
variant = X[1],
ymin_err = mean(log2medianNC) - sd(log2medianNC),
ymax_err = mean(log2medianNC) + sd(log2medianNC),
xmin_err = mean_scaled_score[1] - std_err_scaled_score[1],
xmax_err = mean_scaled_score[1] + std_err_scaled_score[1])
corr_val = cor(final_plot$meanscore, final_plot$meanNC)^2
corr_val_lab = round(corr_val, 2)
print(corr_val_lab)
ylab = expression(Log["2"]*'(N:C)')
corr_val_annot = expression(r^2*' = '*0.91)
ggplot(final_plot, aes(x = meanscore, y = meanNC)) +
geom_errorbar(aes(ymin = ymin_err, ymax = ymax_err),
color = 'grey') +
geom_errorbarh(aes(xmin = xmin_err, xmax = xmax_err),
color = 'grey') +
geom_point() +
stat_smooth(method='lm',
se=F) +
theme_classic() +
annotate(x = -Inf,
y = Inf,
vjust = 2,
hjust = -0.25,
geom = 'text',
label = corr_val_annot,
size = 14*5/14) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16)) +
xlab('Localization score') +
ylab(ylab)
ggsave('F3A.png', dpi = 600, width = 3.1, height = 2.75)
data_3b <- summary[which(summary$mutant %in% c('Wild-Type', 'A2P', 'K4R', 'A2P K4R', 'A2P V9I', 'A2P K4R V9I')),]
data_3b_plot <- data_3b %>%
group_by(.dots=c("mutant")) %>%
summarize(mean = mean(medianNC),
ymin_se = mean(medianNC) - sd(medianNC),
ymax_se = mean(medianNC) + sd(medianNC))
data_3b_plot$mutant = factor(data_3b_plot$mutant,
levels = c('Wild-Type', 'A2P', 'K4R', 'A2P K4R', 'A2P V9I', 'A2P K4R V9I'),
order = order(data_3b_plot$mean))
ggplot(data_3b_plot, aes(x = mutant, y = mean)) +
geom_bar(stat='identity') +
geom_errorbar(aes(ymin = ymin_se,
ymax = ymax_se),
color = 'grey',
width = 0) +
theme_classic() +
theme(axis.text.x=element_text(size=14,
angle = 45,
hjust = 1),
axis.text.y=element_text(size=14),
axis.title=element_text(size=16)) +
xlab('Variant') +
ylab('N:C')
ggsave('F3B.png', dpi = 600, width = 2.750, height = 2.75)
View(df)
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP4.5'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(5000), linetype='dashed')
library(ggplot2)
library(dplyr)
library(reshape2)
rep1 <- read.csv('../data_old/REP1.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep1$rep = 'REP1'
rep2 <- read.csv('../data_old/rep2.1.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep2$rep = 'REP2'
rep4.5 <-  read.csv('../data_old/rep4and5.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep4.5$rep = 'REP4.5'
rep7 <- read.csv('../data_old/rep7.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep7$rep = 'REP7'
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity','rep')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[5]])
})
# reshape but break up into manageable chunks of 100 rows
df_out <- bind_rows(lapply(seq(0, nrow(df), 100), function(y) {
reshape(df[y:min(y+100, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj','rep'),
timevar = 'compartment',
direction = 'wide')}))
# max compartment
df_out$max_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, max)
df_out$min_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, min)
# use bottom 5% of cells to estimate background
print(unique(df_out$well))
background_df = as.data.frame(t(sapply(unique(df_out$well), function(y) {
subset = df_out[which(df_out$well == y),]
q05 = quantile(subset$min_nucleus_cytoplasm, 0.10, na.rm = T)
return(c(y, q05))
}))) ; colnames(background_df) = c('well', 'background')
df_out = merge(df_out, background_df, by = 'well') # merge the background df with the original
# reset most things to numeric
df_out[,c('obj', 'site', 'intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus', 'max_nucleus_cytoplasm', 'min_nucleus_cytoplasm', 'background')] =
apply(
df_out[,c('obj', 'site', 'intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus', 'max_nucleus_cytoplasm', 'min_nucleus_cytoplasm', 'background')],
2,
as.numeric)
# subtract background from cytoplasm and nucleus
df_out$intensity.NIR_and_cytoplasm.corr = df_out$intensity.NIR_and_cytoplasm - df_out$background
df_out$intensity.NIR_and_nucleus.corr = df_out$intensity.NIR_and_nucleus - df_out$background
return(df_out)
}
all_reps <- bind_rows(lapply(list(rep1, rep2, rep4.5, rep7), preprocess))
# add in information about variants and cutoffs
all_reps_annot <- merge(all_reps, read.csv('variants.csv'), by.x = c('well', 'rep'), by.y = c('well', 'replicate'))
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP1'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(10000), linetype = 'dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP2'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~well) + geom_vline(xintercept = log10(10000), linetype = 'dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP4.5'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(5000), linetype='dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP7'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(well~mutant) + geom_vline(xintercept = log10(4000), linetype = 'dashed')
# function to remove cells with lowest 50% of maximum values
remove_dim <- function(df) {
return(df[which(df$max_nucleus_cytoplasm > unique(df$cutoff)),])
}
# get NCratios
all_reps_annot$NCratio <- all_reps_annot$intensity.NIR_and_nucleus.corr / all_reps_annot$intensity.NIR_and_cytoplasm.corr
# remove cells with the lowest 50% of maximum values
all_reps_filt <- all_reps_annot[which(!is.na(all_reps_annot$NCratio) &
is.finite(all_reps_annot$NCratio)),] %>%
do(remove_dim(.))
# filter cells that likely do not express miRFP
# group by well and replicate, then calculate median value
summary <- all_reps_filt[which(!is.na(all_reps_filt$NCratio) &
is.finite(all_reps_filt$NCratio)),] %>%
group_by(.dots=c("rep","well","mutant")) %>%
summarize(medianNC = median(NCratio), N = length(NCratio))
# plot median values
## highly variable need to filter based on histograms
ggplot(summary, aes(x = mutant, y = log2(medianNC), color = rep)) + geom_point() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) #+ scale_color_viridis_c() + stat_summary(fun.data = 'mean_cl_boot')
# plot variants against their score
variant_scores = read.csv('../../nls_scores/code/ST3.csv', stringsAsFactors = F)
variant_scores[which(variant_scores$X == '_wt'),'X'] = 'Wild-Type'
to_plot <- merge(variant_scores, summary, by.x = 'X', by.y = 'mutant')
to_plot$log2medianNC = log2(to_plot$medianNC)
ggplot(to_plot, aes(x = mean_scaled_score, y = log2medianNC)) + geom_point() + stat_summary(fun.y = 'mean', geom = 'point', color = 'blue', size = 2) + theme_classic()
final_plot <- to_plot %>%
group_by(.dots=c("X")) %>%
summarize(meanNC = mean(log2medianNC),
se_NC = sd(log2medianNC),
meanscore = mean_scaled_score[1],
se_score = std_err_scaled_score[1],
variant = X[1],
ymin_err = mean(log2medianNC) - sd(log2medianNC),
ymax_err = mean(log2medianNC) + sd(log2medianNC),
xmin_err = mean_scaled_score[1] - std_err_scaled_score[1],
xmax_err = mean_scaled_score[1] + std_err_scaled_score[1])
corr_val = cor(final_plot$meanscore, final_plot$meanNC)^2
corr_val_lab = round(corr_val, 2)
print(corr_val_lab)
ylab = expression(Log["2"]*'(N:C)')
corr_val_annot = expression(r^2*' = '*0.91)
ggplot(final_plot, aes(x = meanscore, y = meanNC)) +
geom_errorbar(aes(ymin = ymin_err, ymax = ymax_err),
color = 'grey') +
geom_errorbarh(aes(xmin = xmin_err, xmax = xmax_err),
color = 'grey') +
geom_point() +
stat_smooth(method='lm',
se=F) +
theme_classic() +
annotate(x = -Inf,
y = Inf,
vjust = 2,
hjust = -0.25,
geom = 'text',
label = corr_val_annot,
size = 14*5/14) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16)) +
xlab('Localization score') +
ylab(ylab)
ggsave('F3A.png', dpi = 600, width = 3.1, height = 2.75)
data_3b <- summary[which(summary$mutant %in% c('Wild-Type', 'A2P', 'K4R', 'A2P K4R', 'A2P V9I', 'A2P K4R V9I')),]
data_3b_plot <- data_3b %>%
group_by(.dots=c("mutant")) %>%
summarize(mean = mean(medianNC),
ymin_se = mean(medianNC) - sd(medianNC),
ymax_se = mean(medianNC) + sd(medianNC))
data_3b_plot$mutant = factor(data_3b_plot$mutant,
levels = c('Wild-Type', 'A2P', 'K4R', 'A2P K4R', 'A2P V9I', 'A2P K4R V9I'),
order = order(data_3b_plot$mean))
ggplot(data_3b_plot, aes(x = mutant, y = mean)) +
geom_bar(stat='identity') +
geom_errorbar(aes(ymin = ymin_se,
ymax = ymax_se),
color = 'grey',
width = 0) +
theme_classic() +
theme(axis.text.x=element_text(size=14,
angle = 45,
hjust = 1),
axis.text.y=element_text(size=14),
axis.title=element_text(size=16)) +
xlab('Variant') +
ylab('N:C')
ggsave('F3B.png', dpi = 600, width = 2.750, height = 2.75)
