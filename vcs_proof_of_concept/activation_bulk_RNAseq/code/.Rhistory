theme_classic() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
strip.text.x = element_text(size=16),
strip.background = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
guides(color=guide_legend(title='Phenotype', override.aes = list(size=5)))
# plot new UMAP
cds_exp1.mnn_taxol = reduce_dimension(cds_exp1.mnn_taxol, reduction_method = 'UMAP', umap.n_neighbors = 30)
plot_cells(cds_exp1.mnn_taxol, color_cells_by = 'Phase', label_cell_groups = F, cell_size = 0.1) +
facet_wrap(~pheno, ncol = 2, scales = 'free_y') +
#geom_density_2d(color = 'black', alpha = 0.5) +
xlim(-6.75, 7.5) +
ylim(-4, 4.5) +
#geom_vline(xintercept = 0, linetype = 'dashed') +
#geom_hline(yintercept = 0, linetype = 'dashed') +
geom_text(aes(label = pheno),
x = -Inf,
y = Inf,
size = 5,
hjust = -0.1,
vjust = 1,
data = data.frame(pheno = c('Normal', 'Lobulated'),
val = c(1,2))) +
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14),
strip.text.x = element_blank(),
strip.background = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.grid.major = element_line(size = 0.5,
linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0,
linetype = 'solid',
colour = "white"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.position ='bottom',
plot.margin=unit(c(0.1,0.1,-0.1,0.1),"in")) +
guides(color=guide_legend(title='Cell Cycle Phase', override.aes = list(size=5)))
ggsave('F4C.png', dpi = 900, width = 4.5, height = 2.75)
# add principle components to colData
pca_rep1.mnn            <- base::cbind(data.frame(colData(cds_exp1.mnn_taxol)), data.frame(cds_exp1.mnn_taxol@reducedDims$PCA))
colnames(pca_rep1.mnn)  <- c('cell','S.Score','G2M.Score','Phase','sample','Size_Factor', 'pheno',
sapply(seq(1,50), function(x) paste0('PC', x)))
pca_rep1.mnn$experiment = 'Experiment 1 - VCS'
cols <- c('experiment', 'Phase', 'pheno', 'PC1', 'PC2', 'PC3', 'PC4', 'PC5', 'PC6')
to_plot = pca_rep1.mnn[,c(cols)]
to_plot = melt(to_plot, id.vars = cols[1:3])
# plot first 6 principle components. Demonstrates PCs 1-4 best distinguish between normal and low shape factor cells
ggplot(to_plot, aes(x = Phase, y = value, fill = pheno)) +
geom_boxplot() +
guides(color = FALSE) +
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14),
strip.text.x = element_text(size = 16),
strip.background = element_blank(),
axis.ticks.y=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y = element_blank(),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position="bottom") +
xlab('Cell cycle phase') +
facet_wrap(~variable, scales = 'free', ncol = 2) +
scale_fill_manual(name = 'Phenotype', values = c('#91bfdb', '#fc8d59'))
ggsave('SF4C.png', width = 3.75, height = 5, dpi = 900)
library(AUC)
# use PC1 alone
accs <- roc(predictions = pca_rep1.mnn$PC1,
labels = as.factor(pca_rep1.mnn$sample == 3))
plot(x = accs$fpr, y = accs$tpr) # it's ok.
print(auc(accs))
# use first 4 PCs
nuclear_shape_score = glm(formula = as.factor(sample) ~ PC1 + PC2 + PC3 + PC4,
data = data.frame(pca_rep1.mnn),
family = 'binomial'(link = 'logit'))
accs <- roc(predictions = nuclear_shape_score$fitted.values,
labels = as.factor(pca_rep1.mnn$sample == 4))
print(auc(accs))
plot(x = accs$fpr, y = accs$tpr) # pretty good! Let's try using this instead.
if(all(names(nuclear_shape_score$fitted.values) == colnames(cds_exp1.mnn_taxol))) { # ensure names are in the same order
colData(cds_exp1.mnn_taxol)$shape_score = nuclear_shape_score$linear.predictors} # use linear.predictor variable so that you don't get weird regression results
# add the score to the dataframe
ggplot(data.frame(colData(cds_exp1.mnn_taxol)), aes(x = shape_score, fill = sample)) + geom_histogram() + theme_classic()
plot_cells(cds_exp1.mnn_taxol, color_cells_by = 'shape_score') +
theme_classic() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
strip.text.x = element_text(size=16),
strip.background = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
guides(color=guide_legend(title='Lobulation\nScore', override.aes = list(size = 5)))
ggsave('SF4D.png', dpi = 900, width = 3.750, height = 2.5)
# remake the cds for taxol, replicate 2 but use the new principle components
cds_exp2.mnn_taxol = cds_exp2[,which(colData(cds_exp2)$sample == 2)]
# reorder cds to match mnn batch correction
cds_exp2.mnn_taxol = cds_exp2.mnn_taxol[,match(colnames(mnn_exp1.exp2_taxol)[which(mnn_exp1.exp2_taxol$batch == 1)],
colnames(cds_exp2.mnn_taxol))]
# replace PCA with mnn batch corrected PCA
reducedDim(cds_exp2.mnn_taxol, 'PCA') <- reducedDim(mnn_exp1.exp2_taxol)[which(mnn_exp1.exp2_taxol$batch == 1),]
# remake UMAP
cds_exp2.mnn_taxol = reduce_dimension(cds_exp2.mnn_taxol, reduction_method = 'UMAP', umap.n_neighbors = 30)
# apply the model to this sample
pca_rep2.mnn            <- base::cbind(data.frame(colData(cds_exp2.mnn_taxol)), data.frame(cds_exp2.mnn_taxol@reducedDims$PCA))
colnames(pca_rep2.mnn)  <- c('cell','S.Score','G2M.Score','Phase','sample','Size_Factor', 'pheno',
sapply(seq(1,50), function(x) paste0('PC', x)))
pca_rep2.mnn$shape_score <- predict(nuclear_shape_score, pca_rep2.mnn)
# annotate the colData with shape_score
colData(cds_exp2.mnn_taxol) = cbind(colData(cds_exp2.mnn_taxol), pca_rep2.mnn[,'shape_score'])
colnames(colData(cds_exp2.mnn_taxol)) = c('cell', 'S.Score', 'G2M.Score', 'Phase', 'sample', 'Size_Factor', 'pheno', 'shape_score')
ggarrange(plotlist = list(
plot_cells(cds_exp2.mnn_taxol, color_cells_by = 'shape_score') +
theme_classic() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
strip.text.x = element_text(size=16),
strip.background = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
guides(color=guide_legend(title='Lobulation\nScore', override.aes = list(size = 5))),
plot_cells(cds_exp2.mnn_taxol, color_cells_by = 'Phase') +
theme_classic() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
strip.text.x = element_text(size=16),
strip.background = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
guides(color=guide_legend(title='Lobulation\nScore', override.aes = list(size = 5)))
))
# include data from replicate 1 as a comparison
merged_scores <- rbind(pca_rep2.mnn[,c('cell', 'shape_score', 'pheno')], data.frame(colData(cds_exp1.mnn_taxol))[,c('cell','shape_score', 'pheno')])
merged_scores$Exp = c(rep('Experiment 2', nrow(pca_rep2.mnn)), rep('Experiment 1', nrow(colData(cds_exp1.mnn_taxol))))
ggplot(merged_scores) +
geom_histogram(aes(x = shape_score, fill = pheno),
bins = 40, color = 'black', size = 0.5) +
facet_wrap(~Exp, ncol = 1, scales = 'free_y') + xlim(-7.5, 10) +
theme_classic() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
strip.text.x = element_text(size=16),
strip.background = element_blank(),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = c(0, 1),
legend.justification = c(-0.05, 1)) +
xlim(-8, 8) +
guides(fill=guide_legend(title='Phenotype')) +
scale_fill_manual(values = c('#91bfdb', '#fc8d59', '#ffffbf')) +
xlab('Lobulation Score') +
ylab('Count')
ggsave('SF4C.png', dpi = 900, width = 4.5, height = 5)
degs_taxol_shape_exp2 <- fit_models(cds_exp2.mnn_taxol,
model_formula_str = '~shape_score + S.Score + G2M.Score')
# derive beta coefficients
coeffs_taxol_shape_exp2 <- coefficient_table(degs_taxol_shape_exp2)
coeffs_taxol_shape_exp2 <- as.data.frame(coeffs_taxol_shape_exp2)
#write.csv(coeffs_taxol_shape_exp2, 'degs_taxol_shape_exp2.csv')
# plot volcano plot
ggplot(coeffs_taxol_shape_exp2[which(coeffs_taxol_shape_exp2$term == 'shape_score'),], aes(x = normalized_effect)) + geom_histogram(bins = 100) + geom_vline(xintercept = -0.1, linetype='dashed') + geom_vline(xintercept = 0.1, linetype ='dashed')
coeffs_taxol_shape_exp2$significant_deg = abs(coeffs_taxol_shape_exp2$normalized_effect) > 0.1 & coeffs_taxol_shape_exp2$q_value < 0.01
coeffs_taxol_shape_exp2$hvg = coeffs_taxol_shape_exp2$id %in% chosen
write.csv(coeffs_taxol_shape_exp2[which(coeffs_taxol_shape_exp2$significant_deg & coeffs_taxol_shape_exp2$term == 'shape_score'),], 'ST5.csv')
ggplot(coeffs_taxol_shape_exp2[which(coeffs_taxol_shape_exp2$term == 'shape_score'),], aes(x = normalized_effect, y = -log10(q_value), color = significant_deg)) +
geom_point(size = 1) +
theme_classic() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
strip.text.x = element_text(size=16),
strip.background = element_blank(),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
xlab('Log2(Effect Size)') +
ylab('-Log10(q value)') +
scale_color_manual(values = c('#bababa', '#ca0020')) +
guides(color=FALSE)
ggsave('SF4E.png', width = 2.75, height = 2.5, dpi = 900)
coeffs_taxol_shape_exp2[order(coeffs_taxol_shape_exp2$q_value),]
upreg_degs = coeffs_taxol_shape_exp2[which(coeffs_taxol_shape_exp2$term == 'shape_score' &
coeffs_taxol_shape_exp2$significant_deg &
coeffs_taxol_shape_exp2$normalized_effect > 0),'gene_short_name']
downreg_degs = coeffs_taxol_shape_exp2[which(coeffs_taxol_shape_exp2$term == 'shape_score' &
coeffs_taxol_shape_exp2$significant_deg &
coeffs_taxol_shape_exp2$normalized_effect < 0),'gene_short_name']
gsea_analysis <- function(degs, universe, geneset_file){
gsc_hallmarks = loadGSCSafe(file = geneset_file) # load geneset
gsc_result = piano::runGSAhyper(genes = degs, # perform gsea
universe = as.character(unique(universe)),
gsc = gsc_hallmarks)
output = as.data.frame(gsc_result$resTab)
output$sig_genest_in_geneset <- sapply(row.names(output), function(x) {
all_genes = unlist(gsc_result$gsc[x][[1]])
return(paste0(intersect(degs, all_genes), collapse = ', '))
})
return(output)
}
# the universe are any genes tested by the deg test
universe = unique(coeffs_taxol_shape_exp2$gene_short_name)
# look at upreg degs in the two genesets:
hallmarks_upreg <- gsea_analysis(upreg_degs,
universe,
'../data/genesets/h.all.v6.2.symbols.gmt')
canonpaths_upreg <- gsea_analysis(upreg_degs,
universe,
'../data/genesets/c2.cp.v7.0.symbols.gmt')
# look at downreg degs in the two genesets
hallmarks_downreg <- gsea_analysis(downreg_degs,
universe,
'../data/genesets/h.all.v6.2.symbols.gmt'); hallmarks_downreg = hallmarks_downreg[which(hallmarks_downreg$`Adjusted p-value` < 0.01),] ; write.csv(hallmarks_downreg[order(hallmarks_downreg$`Adjusted p-value`),],
'ST7.csv')
canonpaths_downreg <- gsea_analysis(downreg_degs,
universe,
'../data/genesets/c2.cp.v7.0.symbols.gmt'); canonpaths_downreg = canonpaths_downreg[which(canonpaths_downreg$`Adjusted p-value` < 0.01),] ; canonpaths_downreg$prop_genes = canonpaths_downreg$`Significant (in gene set)`/(canonpaths_downreg$`Non-significant (in gene set)`+canonpaths_downreg$`Significant (in gene set)`) ; write.csv(canonpaths_downreg[order(canonpaths_downreg$prop_genes, decreasing = T),],
'ST6.csv')
GOIs = c('TUBB4B',
'CLU',
'HSPA5',
'STMN1',
'CCT5')
get_gene_df <- function(cds, ids = NULL, genes = NULL, corr = T) {
# if gene names given, retrieve ids
if(!is.null(genes)) { ids = rowData(cds)[which(rowData(cds)$gene_short_name %in% genes),'id'] }
ids = as.character(ids)
# correct values for size factor and bind to cell data
gene_expr       <- exprs(cds[ids,])
if(corr) {corr_gene_expr  <-  as.data.frame(apply(gene_expr, 1, function(x) x / colData(cds)$Size_Factor))} else {corr_gene_expr = t(gene_expr)}
colnames(corr_gene_expr) <- rowData(cds)[ids,'gene_short_name']
output = cbind(colData(cds), corr_gene_expr)
# return the output
return(as.data.frame(output))
}
# look at some select genes
df_chosen_genes <- get_gene_df(cds_exp2.mnn_taxol, genes = GOIs, corr = F)
# reshape to long format
df_chosen_genes_long <- melt(df_chosen_genes, id.vars = c('cell', 'S.Score', 'G2M.Score', 'Phase', 'sample', 'Size_Factor', 'shape_score', 'pheno'))
df_chosen_genes_long$value = as.numeric(df_chosen_genes_long$value)
df_chosen_genes_long$gene = factor(as.factor(df_chosen_genes_long$variable),
levels = GOIs,
ordered = T)
# create an annotation df with log2(ES) and qvalue
annotation_df = as.data.frame(coeffs_taxol_shape_exp2[which(coeffs_taxol_shape_exp2$term == 'shape_score' &
coeffs_taxol_shape_exp2$gene_short_name %in% GOIs),
c('gene_short_name', 'q_value', 'normalized_effect')])
annotation_df$variable = annotation_df$gene_short_name
annotation_df$gene = factor(as.factor(annotation_df$variable),
levels = GOIs,
ordered = T)
annotation_df$annotation = paste0('q val: ',
format(unlist(annotation_df['q_value']), format='e', digits = 2),
'\nlog2(ES): ',
format(unlist(annotation_df['normalized_effect']), digits = 2))
# plot
ggplot(df_chosen_genes_long) +
#ggplot(df_chosen_genes_long[which(df_chosen_genes_long$Phase == 'G2M'),]) +
geom_jitter(size = 1, alpha = 0.2, aes(x = shape_score, y = value, color = Phase)) +
facet_wrap(~gene, scales = 'free', ncol = 3) +
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16),
strip.text.x = element_text(size=16),
strip.background = element_blank(),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
geom_text(data = annotation_df, x= Inf, y = Inf, hjust = 1, vjust = 1, aes(label = annotation)) +
guides(fill=guide_legend(title='Phenotype')) +
ylab('Gene Count') +
xlab('Lobulation Score') +
scale_fill_manual(values = c('#91bfdb', '#fc8d59')) +
geom_smooth(method="glm.nb",formula=y~x, aes(x = shape_score, y = value, color = Phase))
ggsave('SF4F.png', dpi = 900, width = 6, height = 3.5)
# Microtubule genes
## Source: REACTOME R-HSA-5610524; REACTOME R-HSA-5610525, plus stathmin
tubulin_genes = c('TUBA1C', 'TUBA1B', 'TUBA4A', 'TUBA1A', 'TUBA3C', 'TUBA3D', 'TUBB3', 'TUBB4A', 'TUBB4B', 'TUBB2A', 'TUBB1', 'TUBB2B', 'TUBB6', 'STMN1')
tubulin_df <- coeffs_taxol_shape_exp2[which(coeffs_taxol_shape_exp2$gene_short_name %in% tubulin_genes & coeffs_taxol_shape_exp2$term == 'shape_score'),]
tubulin_df$group = 'tubulin-related'
# Chaperones
## Source: REACTOME R-HSA-390455;
TRiC_genes = c('TCP1', 'CCT2', 'CCT3', 'CCT4', 'CCT5', 'CCT6A', 'CCT6B', 'TRAP1', 'CCT7', 'CCT8', # TRiC
'CLU', 'HSPA5', # Clusterin
'HSP90AA1', 'HSP90AB1', 'HSP90B1', 'HSP90AA2') # HSP90
tric_df <- coeffs_taxol_shape_exp2[which(coeffs_taxol_shape_exp2$gene_short_name %in% TRiC_genes & coeffs_taxol_shape_exp2$term == 'shape_score'),]
tric_df$group = 'chaperones'
all_GOI_df = rbind(tubulin_df, tric_df)
# make a color scale
max_abs_val = max(abs(all_GOI_df$normalized_effect))
pallette = colorRampPalette(c('#b2182b','#d6604d','#f4a582','#fddbc7','#f7f7f7','#d1e5f0','#92c5de','#4393c3','#2166ac'))
pallette = data.frame(val = seq(from = -max_abs_val,
to = max_abs_val,
length.out = 50),
color = pallette(50))
# apply the color scale to the dataset
all_GOI_df$color = sapply(all_GOI_df$normalized_effect, function(x) {
return(pallette[which(abs(x - pallette$val) == min(abs(x - pallette$val))),'color'])
})
print(sapply(c(-0.2, -.15,-.1,-.5, 0), function(x) {
return(pallette[which(abs(x - pallette$val) == min(abs(x - pallette$val))),'color'])
}))
write.csv(all_GOI_df, 'F4E_colors.csv')
# make a dataframe with genes and hallmarks according to shape score
make_pheatmap <- function(cds,
gene_set,
deg_df,
approx_group_size = 500,
exclude_insig_genes = T,
for_png = F) {
# get ids
ids = unlist(sapply(gene_set, function(x) {
as.character(rowData(cds)[which(rowData(cds)$gene_short_name == x),'id'])
}))
# group cells by shape score
cell_group_df <- tibble::tibble(cell = row.names(colData(cds)),
cell_group = cut(x = colData(cds)$shape_score,
round(ncol(cds)/approx_group_size)))
# make matrix
agg_mat <- aggregate_gene_expression(cds[ids,],
cell_group_df =  cell_group_df,
norm_method = 'log')
# rescale the matrix
rescaled_agg_mat <- t(apply(agg_mat, 1, scale)); colnames(rescaled_agg_mat) = colnames(agg_mat)
# make column annotations
anncol <- bind_rows(lapply(levels(cell_group_df$cell_group), function(x) {
data.frame(median_shapescore = median(colData(cds)[which(cell_group_df$cell_group == x),'shape_score']))
})) ; row.names(anncol) <- levels(cell_group_df$cell_group)
# make row annotations
annrow <- deg_df[which(deg_df$id %in% ids),c('id','normalized_effect','q_value','significant_deg', 'gene_short_name')]
annrow <- annrow[which(annrow$significant_deg),]
# reorder the matrix in the same way as the annotation rows
annrow <- annrow[order(-1*as.numeric(annrow$significant_deg), annrow$normalized_effect),] # order row annotations
rescaled_agg_mat<-rescaled_agg_mat[match(annrow$id, row.names(rescaled_agg_mat)),]
# make the heatmap
if(for_png){
pheatmap::pheatmap(rescaled_agg_mat,
color = RColorBrewer::brewer.pal(9, 'Reds'),
breaks = seq(-2,2, length.out = 9),
cluster_rows = FALSE,
cluster_cols = FALSE,
fontsize = 24,
#annotation_row = data.frame(normalized_effect = annrow$normalized_effect,
#row.names = annrow$id),
annotation_col = anncol,
labels_row= annrow$gene_short_name,
cuttree_rows = 2,
annotation_colors = list(normalized_effect = rev(RColorBrewer::brewer.pal(9, 'Reds'))[1:5],
median_shapescore = RColorBrewer::brewer.pal(9, 'Greys')))} else {
pheatmap::pheatmap(rescaled_agg_mat,
color = RColorBrewer::brewer.pal(9, 'Reds'),
breaks = seq(-2,2, length.out = 9),
cluster_rows = FALSE,
cluster_cols = FALSE,
#annotation_row = data.frame(normalized_effect = annrow$normalized_effect,
#row.names = annrow$id),
annotation_col = anncol,
labels_row= annrow$gene_short_name,
cuttree_rows = 2,
annotation_colors = list(normalized_effect = rev(RColorBrewer::brewer.pal(9, 'Reds'))[1:5],
median_shapescore = RColorBrewer::brewer.pal(9, 'Greys')))
}
}
save_pheatmap <- function(x, filename, width=900, height=1800) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
png(filename,width = width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
# load geneset
hallmarks = loadGSCSafe('../data/genesets/h.all.v6.2.symbols.gmt')
canonpaths = loadGSCSafe('../data/genesets/c2.cp.v7.0.symbols.gmt')
## Make Myc Heatmap
ph <- make_pheatmap(cds = cds_exp2.mnn_taxol,
gene_set = as.character(unlist(hallmarks$gsc$HALLMARK_MYC_TARGETS_V1)),
deg_df = coeffs_taxol_shape_exp2[which(coeffs_taxol_shape_exp2$term == 'shape_score'),],
approx_group_size = 400,
exclude_insig_genes = T,for_png = T
)
save_pheatmap(ph,
width = 900,
height = 2050,
'F4F_Right_1.png')
## Make mTOR Heatmap
ph <- make_pheatmap(cds = cds_exp2.mnn_taxol,
gene_set = as.character(unlist(hallmarks$gsc$HALLMARK_MTORC1_SIGNALING)),
deg_df = coeffs_taxol_shape_exp2[which(coeffs_taxol_shape_exp2$term == 'shape_score'),],
approx_group_size = 400,
exclude_insig_genes = T,
for_png = T
)
save_pheatmap(ph,
width = 900,
height = 1710,
'F4F_Left.png')
## Make other Myc targets (doesn't overlap with mTOR as much)
ph <- make_pheatmap(cds = cds_exp2.mnn_taxol,
gene_set = as.character(unlist(hallmarks$gsc$HALLMARK_MYC_TARGETS_V2)),
deg_df = coeffs_taxol_shape_exp2[which(coeffs_taxol_shape_exp2$term == 'shape_score'),],
approx_group_size = 400,
exclude_insig_genes = T,
for_png = T)
save_pheatmap(ph,
width = 900,
height = 1025,
'F4F_Right_2.png')
ph <- make_pheatmap(cds = cds_exp2.mnn_taxol,
gene_set = as.character(unlist(canonpaths$gsc$REACTOME_FOLDING_OF_ACTIN_BY_CCT_TRIC)),
deg_df = coeffs_taxol_shape_exp2[which(coeffs_taxol_shape_exp2$term == 'shape_score'),],
approx_group_size = 400,
exclude_insig_genes = T)
# get mitochondrial gene list
mito_genes <- read.csv('../data/mito_genes/mitogenes_ncbi_11-07-19.txt', sep = '\t', stringsAsFactors = F)
mito_genes <- mito_genes[which(mito_genes$tax_id == 9606),]
mito_gene_grp <-   data.frame(gene_id = rowData(cds_exp1)[which(rowData(cds_exp1)$gene_short_name %in% mito_genes$Symbol),'id'],
group = 1)
# aggregate expression across all these genes
colData(cds_exp1)$mito_gene_expr <- aggregate_gene_expression(cds_exp1[as.character(mito_gene_grp$gene_id),],
gene_group_df = mito_gene_grp,
cell_group_df =  NULL,
norm_method = 'log')
ggplot(as.data.frame(colData(cds_exp1)), aes(x = sample, y = mito_gene_expr)) + geom_boxplot()
plot_cells(cds_exp1, color_cells_by = 'mito_gene_expr') # note that UMAP samples/clusters do not show different levels of MT genes
cds_exp1_soupx_pca <- readRDS('../data/soupx_results/cds_bg_remove_no_align.RDS')
# annotate cells with phenotype
colData(cds_exp1_soupx_pca)$pheno = factor('Normal', levels = c('Normal', 'Lobulated', 'Mixed'))
colData(cds_exp1_soupx_pca)[which(colData(cds_exp1_soupx_pca)$sample == 4 ),'pheno'] = as.factor('Lobulated')
# prep dataframe for UMAP
cds_exp1_soupx_pca = reduce_dimension(cds_exp1_soupx_pca, reduction_method = 'UMAP', umap.n_neighbors = 30)
# plot
plot_cells(cds_exp1_soupx_pca[,which(colData(cds_exp1_soupx_pca)$sample %in% c(3,4))], color_cells_by = 'pheno', label_cell_groups = F) + scale_color_manual(values = c('#91bfdb', '#fc8d59')) +
theme_classic() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
strip.text.x = element_text(size=16),
strip.background = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
guides(color=guide_legend(title='Phenotype', override.aes = list(size=5))) # batch effect entirely corrected
SF4B <- ggarrange(plotlist = list(
plot_cells(cds_exp1[,which(colData(cds_exp1)$sample %in% c(3,4))], color_cells_by = 'pheno', label_cell_groups = F) + scale_color_manual(values = c('#91bfdb', '#fc8d59')) +
theme_classic() +
theme(axis.title=element_blank(),
strip.text.x = element_text(size=16),
strip.background = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title = element_text(size = 14, hjust = 0.5)) +
guides(color=guide_legend(title='Phenotype', override.aes = list(size=5))) +
ggtitle('Uncorrected\n '),
plot_cells(cds_exp1_soupx_pca[,which(colData(cds_exp1_soupx_pca)$sample %in% c(3,4))], color_cells_by = 'pheno', label_cell_groups = F) + scale_color_manual(values = c('#91bfdb', '#fc8d59')) +
theme_classic() +
theme(axis.title=element_blank(),
strip.text.x = element_text(size=16),
strip.background = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title = element_text(size = 14, hjust = 0.5)) +
guides(color=guide_legend(title='Phenotype', override.aes = list(size=5))) +
ggtitle('Corrected for\ncell-free RNA')
), common.legend = T, legend='right'
)
annotate_figure(SF4B,
left = text_grob('UMAP 2', rot = 90, size = 16),
bottom = text_grob('UMAP 1', size = 16)
)
ggsave('SF4B.png', dpi = 900, width = 5.25, height = 2.5)
save.image('scrnaseq_analysis.RData')
setwd("C:/Users/admin/OneDrive - UW/PhD/Publications/VCS_2019/github_repo/vcs_2019_pushed/vcs_2019/vcs_proof_of_concept/activation_bulk_RNAseq/code")
suppressPackageStartupMessages({
library(monocle)
library(dplyr)
library(ggplot2)
library(reshape2)
library(viridis)
library(ggridges)
library(GGally)
})
sessionInfo()
