x.single.toplot$density = get_density(x.single.toplot$FSC.A, x.single.toplot$FSC.W, n = 100)
x.single.plt = ggplot(x.single.toplot, aes(x=FSC.A, y=FSC.W, color = density)) +
geom_point(data = x.live.toplot, alpha = 0) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')))+
guides(color = F)
# extract data and calculate PE/FITC ratio
x.live.single <- calc.ratio.extract.data(x.single)
# remove rows with data at the minimum value for PE.A, FITC.A
x.live.single <- x.live.single[which(x.live.single[,'PE.A.log'] != min(x.live.single[,'PE.A.log'])),]
x.live.single <- x.live.single[which(x.live.single[,'FITC.A.log'] != min(x.live.single[,'FITC.A.log'])),]
# show dendra2 filter
x.live.singleplt = ggplot(x.live.single, aes(x=FITC.A.log)) +
geom_histogram(bins = 100, color = 'black') +
theme_classic() +
geom_vline(xintercept = FITC.gate, linetype = 'dashed')
# filter for FITC positive cells
x.live.single.FITCpos<-x.live.single[which(x.live.single[,'FITC.A.log'] > FITC.gate),]
S1A = ggarrange(plotlist = list(x.plt, x.notrash.plt, x.live.plt, x.live.plt2, x.single.plt, x.live.singleplt), ncol = 3)
ggsave('SF1A.png', S1A, width = 7.5, height = 3, dpi = 900 \)
ggsave('SF1A.png', S1A, width = 7.5, height = 3, dpi = 900)
ggsave('SF1A.png', S1A, width = 7.5, height = 3, dpi = 900)
S1A = ggarrange(plotlist = list(x.plt, x.notrash.plt, x.live.plt, x.live.plt2, x.single.plt, x.live.singleplt), ncol = 3)
ggsave('SF1A.png', S1A, width = 7.5, height = 3, dpi = 900)
S1A = ggarrange(plotlist = list(x.plt, x.notrash.plt, x.live.plt, x.live.plt2, x.single.plt, x.live.singleplt), ncol = 6)
ggsave('SF1A.png', S1A, width = 7.5, height = 3, dpi = 900)
S1A = ggarrange(plotlist = list(x.plt, x.notrash.plt, x.live.plt, x.live.plt2, x.single.plt, x.live.singleplt), ncol = 3, nrow = 2)
ggsave('SF1A.png', S1A, width = 7.5, height = 3, dpi = 900)
ggsave('SF1A.png', S1A, width = 7.5, height = 4, dpi = 900)
# read data
x = read.FCS('../data/U2OS activated_C04_018.fcs', transformation=FALSE, alter.names=TRUE)
x.toplot = as.data.frame(x@exprs)
x.toplot$density = get_density(x.toplot$FSC.A, x.toplot$SSC.A, n = 100)
x.plt = ggplot(x.toplot, aes(x=FSC.A, y=SSC.A, color = density)) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58'))) +
geom_vline(xintercept =25000, linetype='dashed') +
geom_hline(yintercept =25000, linetype='dashed') +
guides(color = F)
## gate out trash
x.notrash <- gate_trash(x, FSCA_cutoff = 25000, SSCA_cutoff = 25000)
x.notrash.toplot = as.data.frame(x.notrash@exprs)
x.notrash.toplot$density = get_density(x.notrash.toplot$FSC.A, x.notrash.toplot$SSC.A, n = 100)
x.notrash.plt = ggplot(x.notrash.toplot, aes(x=FSC.A, y=SSC.A, color = density)) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58'))) +
guides(color = F)
# filter for live cell and plot
x.live = Subset(x.notrash, filter(x.notrash, live))
x.live.toplot = as.data.frame(x.live@exprs)
x.live.toplot$density = get_density(x.live.toplot$FSC.A, x.live.toplot$SSC.A, n = 100)
x.live.plt = ggplot(x.live.toplot, aes(x=FSC.A, y=SSC.A, color = density)) +
geom_point(data = x.notrash.toplot, alpha = 0) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')))+
guides(color = F)
# filter for single
x.live.toplot$density2 = get_density(x.live.toplot$FSC.A, x.live.toplot$FSC.W, n = 100)
x.live.plt2 = ggplot(x.live.toplot, aes(x=FSC.A, y=FSC.W, color = density2)) +
#geom_point(data = x.notrash.toplot, alpha = 0) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')))+
guides(color = F) + scale_y_continuous(labels = function(x) format(x, scientific = TRUE))
# filter for single cell
x.single = Subset(x.live, filter(x.live, single))
x.single.toplot = as.data.frame(x.single@exprs)
x.single.toplot$density = get_density(x.single.toplot$FSC.A, x.single.toplot$FSC.W, n = 100)
x.single.plt = ggplot(x.single.toplot, aes(x=FSC.A, y=FSC.W, color = density)) +
geom_point(data = x.live.toplot, alpha = 0) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')))+
guides(color = F) + scale_y_continuous(labels = function(x) format(x, scientific = TRUE))
# extract data and calculate PE/FITC ratio
x.live.single <- calc.ratio.extract.data(x.single)
# remove rows with data at the minimum value for PE.A, FITC.A
x.live.single <- x.live.single[which(x.live.single[,'PE.A.log'] != min(x.live.single[,'PE.A.log'])),]
x.live.single <- x.live.single[which(x.live.single[,'FITC.A.log'] != min(x.live.single[,'FITC.A.log'])),]
# show dendra2 filter
x.live.singleplt = ggplot(x.live.single, aes(x=FITC.A.log)) +
geom_histogram(bins = 100) +
theme_classic() +
geom_vline(xintercept = FITC.gate, linetype = 'dashed')
# filter for FITC positive cells
x.live.single.FITCpos<-x.live.single[which(x.live.single[,'FITC.A.log'] > FITC.gate),]
S1A = ggarrange(plotlist = list(x.plt, x.notrash.plt, x.live.plt, x.live.plt2, x.single.plt, x.live.singleplt), ncol = 3, nrow = 2)
ggsave('SF1A.png', S1A, width = 7.5, height = 4, dpi = 900)
# read data
x = read.FCS('../data/U2OS activated_C04_018.fcs', transformation=FALSE, alter.names=TRUE)
x.toplot = as.data.frame(x@exprs)
x.toplot$density = get_density(x.toplot$FSC.A, x.toplot$SSC.A, n = 100)
x.plt = ggplot(x.toplot, aes(x=FSC.A, y=SSC.A, color = density)) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58'))) +
geom_vline(xintercept =25000, linetype='dashed') +
geom_hline(yintercept =25000, linetype='dashed') +
guides(color = F)
## gate out trash
x.notrash <- gate_trash(x, FSCA_cutoff = 25000, SSCA_cutoff = 25000)
x.notrash.toplot = as.data.frame(x.notrash@exprs)
x.notrash.toplot$density = get_density(x.notrash.toplot$FSC.A, x.notrash.toplot$SSC.A, n = 100)
x.notrash.plt = ggplot(x.notrash.toplot, aes(x=FSC.A, y=SSC.A, color = density)) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58'))) +
guides(color = F)
# filter for live cell and plot
x.live = Subset(x.notrash, filter(x.notrash, live))
x.live.toplot = as.data.frame(x.live@exprs)
x.live.toplot$density = get_density(x.live.toplot$FSC.A, x.live.toplot$SSC.A, n = 100)
x.live.plt = ggplot(x.live.toplot, aes(x=FSC.A, y=SSC.A, color = density)) +
geom_point(data = x.notrash.toplot, alpha = 0) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')))+
guides(color = F)
# filter for single
x.live.toplot$density2 = get_density(x.live.toplot$FSC.A, x.live.toplot$FSC.W, n = 100)
x.live.plt2 = ggplot(x.live.toplot, aes(x=FSC.A, y=FSC.W, color = density2)) +
#geom_point(data = x.notrash.toplot, alpha = 0) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')))+
guides(color = F) + scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
scale_x_continuous(labels = function(x) format(x, scientific = TRUE))
# filter for single cell
x.single = Subset(x.live, filter(x.live, single))
x.single.toplot = as.data.frame(x.single@exprs)
x.single.toplot$density = get_density(x.single.toplot$FSC.A, x.single.toplot$FSC.W, n = 100)
x.single.plt = ggplot(x.single.toplot, aes(x=FSC.A, y=FSC.W, color = density)) +
geom_point(data = x.live.toplot, alpha = 0) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')))+
guides(color = F) +
scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
scale_x_continuous(labels = function(x) format(x, scientific = TRUE))
# extract data and calculate PE/FITC ratio
x.live.single <- calc.ratio.extract.data(x.single)
# remove rows with data at the minimum value for PE.A, FITC.A
x.live.single <- x.live.single[which(x.live.single[,'PE.A.log'] != min(x.live.single[,'PE.A.log'])),]
x.live.single <- x.live.single[which(x.live.single[,'FITC.A.log'] != min(x.live.single[,'FITC.A.log'])),]
# show dendra2 filter
x.live.singleplt = ggplot(x.live.single, aes(x=FITC.A.log)) +
geom_histogram(bins = 100) +
theme_classic() +
geom_vline(xintercept = FITC.gate, linetype = 'dashed')
# filter for FITC positive cells
x.live.single.FITCpos<-x.live.single[which(x.live.single[,'FITC.A.log'] > FITC.gate),]
S1A = ggarrange(plotlist = list(x.plt, x.notrash.plt, x.live.plt, x.live.plt2, x.single.plt, x.live.singleplt), ncol = 3, nrow = 2)
ggsave('SF1A.png', S1A, width = 7.5, height = 4, dpi = 900)
# read data
x = read.FCS('../data/U2OS activated_C04_018.fcs', transformation=FALSE, alter.names=TRUE)
x.toplot = as.data.frame(x@exprs)
x.toplot$density = get_density(x.toplot$FSC.A, x.toplot$SSC.A, n = 100)
x.plt = ggplot(x.toplot, aes(x=FSC.A, y=SSC.A, color = density)) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58'))) +
geom_vline(xintercept =25000, linetype='dashed') +
geom_hline(yintercept =25000, linetype='dashed') +
guides(color = F)
## gate out trash
x.notrash <- gate_trash(x, FSCA_cutoff = 25000, SSCA_cutoff = 25000)
x.notrash.toplot = as.data.frame(x.notrash@exprs)
x.notrash.toplot$density = get_density(x.notrash.toplot$FSC.A, x.notrash.toplot$SSC.A, n = 100)
x.notrash.plt = ggplot(x.notrash.toplot, aes(x=FSC.A, y=SSC.A, color = density)) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58'))) +
guides(color = F)
# filter for live cell and plot
x.live = Subset(x.notrash, filter(x.notrash, live))
x.live.toplot = as.data.frame(x.live@exprs)
x.live.toplot$density = get_density(x.live.toplot$FSC.A, x.live.toplot$SSC.A, n = 100)
x.live.plt = ggplot(x.live.toplot, aes(x=FSC.A, y=SSC.A, color = density)) +
geom_point(data = x.notrash.toplot, alpha = 0) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')))+
guides(color = F)
# filter for single
x.live.toplot$density2 = get_density(x.live.toplot$FSC.A, x.live.toplot$FSC.W, n = 100)
x.live.plt2 = ggplot(x.live.toplot, aes(x=FSC.A, y=FSC.W, color = density2)) +
#geom_point(data = x.notrash.toplot, alpha = 0) +
theme_classic() +
theme(axis.text.x = element_text(angle =45 ))+
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')))+
guides(color = F) + scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
scale_x_continuous(labels = function(x) format(x, scientific = TRUE))
# filter for single cell
x.single = Subset(x.live, filter(x.live, single))
x.single.toplot = as.data.frame(x.single@exprs)
x.single.toplot$density = get_density(x.single.toplot$FSC.A, x.single.toplot$FSC.W, n = 100)
x.single.plt = ggplot(x.single.toplot, aes(x=FSC.A, y=FSC.W, color = density)) +
geom_point(data = x.live.toplot, alpha = 0) +
theme_classic() +
theme(axis.text.x = element_text(angle =45 ))+
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')))+
guides(color = F) +
scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
scale_x_continuous(labels = function(x) format(x, scientific = TRUE))
# extract data and calculate PE/FITC ratio
x.live.single <- calc.ratio.extract.data(x.single)
# remove rows with data at the minimum value for PE.A, FITC.A
x.live.single <- x.live.single[which(x.live.single[,'PE.A.log'] != min(x.live.single[,'PE.A.log'])),]
x.live.single <- x.live.single[which(x.live.single[,'FITC.A.log'] != min(x.live.single[,'FITC.A.log'])),]
# show dendra2 filter
x.live.singleplt = ggplot(x.live.single, aes(x=FITC.A.log)) +
geom_histogram(bins = 100) +
theme_classic() +
geom_vline(xintercept = FITC.gate, linetype = 'dashed')
# filter for FITC positive cells
x.live.single.FITCpos<-x.live.single[which(x.live.single[,'FITC.A.log'] > FITC.gate),]
S1A = ggarrange(plotlist = list(x.plt, x.notrash.plt, x.live.plt, x.live.plt2, x.single.plt, x.live.singleplt), ncol = 3, nrow = 2)
ggsave('SF1A.png', S1A, width = 7.5, height = 4.5, dpi = 900)
# read data
x = read.FCS('../data/U2OS activated_C04_018.fcs', transformation=FALSE, alter.names=TRUE)
x.toplot = as.data.frame(x@exprs)
x.toplot$density = get_density(x.toplot$FSC.A, x.toplot$SSC.A, n = 100)
x.plt = ggplot(x.toplot, aes(x=FSC.A, y=SSC.A, color = density)) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58'))) +
geom_vline(xintercept =25000, linetype='dashed') +
geom_hline(yintercept =25000, linetype='dashed') +
guides(color = F)
## gate out trash
x.notrash <- gate_trash(x, FSCA_cutoff = 25000, SSCA_cutoff = 25000)
x.notrash.toplot = as.data.frame(x.notrash@exprs)
x.notrash.toplot$density = get_density(x.notrash.toplot$FSC.A, x.notrash.toplot$SSC.A, n = 100)
x.notrash.plt = ggplot(x.notrash.toplot, aes(x=FSC.A, y=SSC.A, color = density)) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58'))) +
guides(color = F)
# filter for live cell and plot
x.live = Subset(x.notrash, filter(x.notrash, live))
x.live.toplot = as.data.frame(x.live@exprs)
x.live.toplot$density = get_density(x.live.toplot$FSC.A, x.live.toplot$SSC.A, n = 100)
x.live.plt = ggplot(x.live.toplot, aes(x=FSC.A, y=SSC.A, color = density)) +
geom_point(data = x.notrash.toplot, alpha = 0) +
theme_classic() +
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')))+
guides(color = F)
# filter for single
x.live.toplot$density2 = get_density(x.live.toplot$FSC.A, x.live.toplot$FSC.W, n = 100)
x.live.plt2 = ggplot(x.live.toplot, aes(x=FSC.A, y=FSC.W, color = density2)) +
#geom_point(data = x.notrash.toplot, alpha = 0) +
theme_classic() +
theme(axis.text.x = element_text(angle =45, hjust=1 ))+
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')))+
guides(color = F) + scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
scale_x_continuous(labels = function(x) format(x, scientific = TRUE))
# filter for single cell
x.single = Subset(x.live, filter(x.live, single))
x.single.toplot = as.data.frame(x.single@exprs)
x.single.toplot$density = get_density(x.single.toplot$FSC.A, x.single.toplot$FSC.W, n = 100)
x.single.plt = ggplot(x.single.toplot, aes(x=FSC.A, y=FSC.W, color = density)) +
geom_point(data = x.live.toplot, alpha = 0) +
theme_classic() +
theme(axis.text.x = element_text(angle =45, hjust=1 ))+
geom_point(size = 0.5) +
scale_colour_gradientn(colours = rev(c('#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')))+
guides(color = F) +
scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
scale_x_continuous(labels = function(x) format(x, scientific = TRUE))
# extract data and calculate PE/FITC ratio
x.live.single <- calc.ratio.extract.data(x.single)
# remove rows with data at the minimum value for PE.A, FITC.A
x.live.single <- x.live.single[which(x.live.single[,'PE.A.log'] != min(x.live.single[,'PE.A.log'])),]
x.live.single <- x.live.single[which(x.live.single[,'FITC.A.log'] != min(x.live.single[,'FITC.A.log'])),]
# show dendra2 filter
x.live.singleplt = ggplot(x.live.single, aes(x=FITC.A.log)) +
geom_histogram(bins = 100) +
theme_classic() +
geom_vline(xintercept = FITC.gate, linetype = 'dashed')
# filter for FITC positive cells
x.live.single.FITCpos<-x.live.single[which(x.live.single[,'FITC.A.log'] > FITC.gate),]
S1A = ggarrange(plotlist = list(x.plt, x.notrash.plt, x.live.plt, x.live.plt2, x.single.plt, x.live.singleplt), ncol = 3, nrow = 2)
ggsave('SF1A.png', S1A, width = 7.5, height = 4.5, dpi = 900)
xaxistitle = expression(Log["2"]*(N:C ratio))
xaxistitle = expression(Log["2"]*('N:C ratio'))
data$condition = factor(data$condition, levels = c('no NLS', 'Wild-type SV40 NLS', 'SV40 NLS library') , ordered = T)
data = read.csv('../data/filtered_NLS_library_values.csv')
table(data[,'condition']) # number of cells in each condition
xaxistitle = expression(Log["2"]*('N:C ratio'))
data$condition = factor(data$condition, levels = c('no NLS', 'Wild-type SV40 NLS', 'SV40 NLS library') , ordered = T)
bin_labels = data.frame(xvals = c(-0.15,mean(c(log2(0.964), log2(1.079))), mean(c(log2(1.079), log2(1.244))), 0.4),
labels = c('1','2','3','4'))
ggplot(data, aes(x = nc_ratio, color = condition)) +
geom_density(size = 1, alpha = 0.2, aes(fill = condition)) +
geom_text(data = bin_labels, aes(x = xvals, label = labels), y = Inf, color = 'black', vjust = 1, size = 16 * 5 /14) +
theme_classic() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ylab('Density') +
xlab(xaxistitle) +
scale_color_manual(values = c('#000000', '#2166ac', '#b2182b')) +
scale_fill_manual(values = c('#bababa', '#2166ac', '#b2182b')) +
geom_vline(xintercept = c(log2(0.964), log2(1.079), log2(1.244)), linetype = 'dashed', size = 0.5) +
xlim(-0.3, 0.75) +
guides(color = FALSE, fill = FALSE)
ggsave('F2B.png', dpi = 900, width = 3.25, height = 2.5)
setwd("C:/Users/admin/OneDrive - UW/PhD/Publications/VCS_2019/github_repo/vcs_2019/vcs_nls/nls_validation/code")
library(ggplot2)
library(dplyr)
library(reshape2)
rep1 <- read.csv('../data/REP1.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep1$rep = 'REP1'
rep2 <- read.csv('../data/rep2.1.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep2$rep = 'REP2'
rep4.5 <-  read.csv('../data/rep4and5.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep4.5$rep = 'REP4.5'
rep7 <- read.csv('../data/rep7.csv',
header = F,
col.names = c('compartment',
'time',
'time2',
'well.site',
'channel',
'obj',
'size',
'intensity'))
rep7$rep = 'REP7'
preprocess <- function(df) {
df <- df[,c('compartment', 'well.site', 'obj', 'intensity','rep')]
df$well <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[2]])
})
df$site <- sapply(df$well.site, function(x) {
split = strsplit(as.character(x), ' ')
return(unlist(split)[[4]])
})
# reshape but break up into manageable chunks of 100 rows
df_out <- bind_rows(lapply(seq(0, nrow(df), 100), function(y) {
reshape(df[y:min(y+100, nrow(df)),],
idvar = c('well.site', 'well', 'site', 'obj','rep'),
timevar = 'compartment',
direction = 'wide')}))
# max compartment
df_out$max_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, max)
df_out$min_nucleus_cytoplasm = apply(df_out[,c('intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus')], 1, min)
# use bottom 5% of cells to estimate background
print(unique(df_out$well))
background_df = as.data.frame(t(sapply(unique(df_out$well), function(y) {
subset = df_out[which(df_out$well == y),]
q05 = quantile(subset$min_nucleus_cytoplasm, 0.10, na.rm = T)
return(c(y, q05))
}))) ; colnames(background_df) = c('well', 'background')
df_out = merge(df_out, background_df, by = 'well') # merge the background df with the original
# reset most things to numeric
df_out[,c('obj', 'site', 'intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus', 'max_nucleus_cytoplasm', 'min_nucleus_cytoplasm', 'background')] =
apply(
df_out[,c('obj', 'site', 'intensity.NIR_and_cytoplasm', 'intensity.NIR_and_nucleus', 'max_nucleus_cytoplasm', 'min_nucleus_cytoplasm', 'background')],
2,
as.numeric)
# subtract background from cytoplasm and nucleus
df_out$intensity.NIR_and_cytoplasm.corr = df_out$intensity.NIR_and_cytoplasm - df_out$background
df_out$intensity.NIR_and_nucleus.corr = df_out$intensity.NIR_and_nucleus - df_out$background
return(df_out)
}
all_reps <- bind_rows(lapply(list(rep1, rep2, rep4.5, rep7), preprocess))
# add in information about variants and cutoffs
all_reps_annot <- merge(all_reps, read.csv('variants.csv'), by.x = c('well', 'rep'), by.y = c('well', 'replicate'))
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP1'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(10000), linetype = 'dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP2'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~well) + geom_vline(xintercept = log10(10000), linetype = 'dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP4.5'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(~mutant) + geom_vline(xintercept = log10(5500), linetype='dashed')
ggplot(as.data.frame(all_reps_annot[which(all_reps_annot$rep == 'REP7'),]), aes(x = log10(max_nucleus_cytoplasm))) + geom_histogram(bins = 100) + facet_wrap(well~mutant) + geom_vline(xintercept = log10(4000), linetype = 'dashed')
# function to remove cells with lowest 50% of maximum values
remove_dim <- function(df) {
return(df[which(df$max_nucleus_cytoplasm > df$cutoff),])
}
# get NCratios
all_reps_annot$NCratio <- all_reps_annot$intensity.NIR_and_nucleus.corr / all_reps_annot$intensity.NIR_and_cytoplasm.corr
# remove cells with the lowest 50% of maximum values
all_reps_filt <- all_reps_annot[which(!is.na(all_reps_annot$NCratio) &
is.finite(all_reps_annot$NCratio)),] %>%
do(remove_dim(.))
nums = as.vector(table(all_reps_filt[which(all_reps_filt$mutant %in% c('Wild-type', 'A2P', 'K4R','K4G', 'K6V', 'R7V', 'E1I', 'A2I', 'I11W')),c('rep', 'well')])) # number of cells per replicate
min(nums[which(nums != 0)])
# filter cells that likely do not express miRFP
# group by well and replicate, then calculate median value
summary <- all_reps_filt[which(!is.na(all_reps_filt$NCratio) &
is.finite(all_reps_filt$NCratio)),] %>%
group_by(.dots=c("rep","well","mutant")) %>%
summarize(medianNC = median(NCratio), N = length(NCratio))
# plot median values
## highly variable need to filter based on histograms
ggplot(summary, aes(x = mutant, y = log2(medianNC), color = rep)) + geom_point() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) #+ scale_color_viridis_c() + stat_summary(fun.data = 'mean_cl_boot')
# plot variants against their score
variant_scores = read.csv('../../nls_scores/code/ST3.csv', stringsAsFactors = F)
variant_scores[which(variant_scores$X == '_wt'),'X'] = 'Wild-Type'
to_plot <- merge(variant_scores, summary, by.x = 'X', by.y = 'mutant')
to_plot$log2medianNC = log2(to_plot$medianNC)
ggplot(to_plot, aes(x = mean_scaled_score, y = log2medianNC)) + geom_point() + stat_summary(fun.y = 'mean', geom = 'point', color = 'blue', size = 2) + theme_classic()
final_plot <- to_plot %>%
group_by(.dots=c("X")) %>%
summarize(meanNC = mean(log2medianNC),
se_NC = sd(log2medianNC),
meanscore = mean_scaled_score[1],
se_score = std_err_scaled_score[1],
variant = X[1],
ymin_err = mean(log2medianNC) - sd(log2medianNC),
ymax_err = mean(log2medianNC) + sd(log2medianNC),
xmin_err = mean_scaled_score[1] - std_err_scaled_score[1],
xmax_err = mean_scaled_score[1] + std_err_scaled_score[1])
corr_val = cor(final_plot$meanscore, final_plot$meanNC)^2
corr_val_lab = round(corr_val, 2)
print(corr_val_lab)
ylab = expression(Log["2"]*'(N:C ratio)')
corr_val_annot = expression(r^2*' = '*0.91)
ggplot(final_plot, aes(x = meanscore, y = meanNC)) +
geom_errorbar(aes(ymin = ymin_err, ymax = ymax_err),
color = 'grey') +
geom_errorbarh(aes(xmin = xmin_err, xmax = xmax_err),
color = 'grey') +
geom_point() +
#stat_smooth(method='lm',
#            se=F) +
theme_classic() +
annotate(x = -Inf,
y = Inf,
vjust = 2,
hjust = -0.25,
geom = 'text',
label = corr_val_annot,
size = 14*5/14) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16)) +
xlab('Localization score') +
ylab(ylab)
ggsave('F3A.png', dpi = 600, width = 3.1, height = 2.75)
data_3b <- summary[which(summary$mutant %in% c('Wild-Type', 'A2P', 'K4R', 'A2P K4R', 'A2P V9I', 'A2P K4R V9I')),]
data_3b$mutant = factor(data_3b$mutant, levels = c('Wild-Type', 'A2P', 'K4R', 'A2P K4R', 'A2P V9I', 'A2P K4R V9I'), ordered = T)
nums = as.vector(table(all_reps_filt[which(all_reps_filt$mutant %in% c('Wild-Type', 'A2P', 'K4R', 'A2P K4R', 'A2P V9I', 'A2P K4R V9I')),c('rep', 'well')])) # number of cells per replicate
min(nums[which(nums != 0)])
ggplot(data_3b, aes(x = mutant, y = medianNC)) +
stat_summary(fun.y = 'mean', geom = 'bar') +
geom_point(stat='identity') +
theme_classic() +
theme(axis.text.x=element_text(size=14,
angle = 45,
hjust = 1),
axis.text.y=element_text(size=14),
axis.title=element_text(size=16)) +
xlab('Variant') +
ylab('N:C ratio')
ggsave('F3B.png', dpi = 600, width = 2.750, height = 2.75)
setwd("C:/Users/admin/OneDrive - UW/PhD/Publications/VCS_2019/github_repo/vcs_2019/vcs_proof_of_concept/activation_toxicity/code")
library(ggplot2)
library(reshape2)
X01_26_18_data <- read.csv("../data/flojo_output.csv")[,1:18]
colnames(X01_26_18_data) <- c('sample', 'all.necr', 'all.dead', 'all.apop', 'all.live', 'perc.act', 'act.necr', 'unact.live', 'unact.apop', 'unact.dead', 'unact.necr', 'perc.unact', 'act.dead', 'act.apop', 'act.live', 'activation.time', 'replicate')
reshaped <- melt(X01_26_18_data, id.vars = c('sample', 'activation.time', 'replicate'))
rename_column <- function(variable){
gating <- unlist(strsplit(as.character(variable), '.', fixed = TRUE))[1]
subpop <- unlist(strsplit(as.character(variable), '.', fixed = TRUE))[2]
return(c(gating, subpop))
}
new_columns <- t(rbind(sapply(reshaped$variable, rename_column)))
reshaped$gating <- new_columns[,1]
reshaped$subpop <- new_columns[,2]
# need to remove rows that use mean or SD
reshaped <- reshaped[which(reshaped$replicate != "-"),]
#reorder activation factors
plot_labels = data.frame(activation.time = c('negative_control', '2h', '8h', '24h', '48h', 'positive_control'),
activation.time.plot = factor(c('Negative C', '2h', '8h', '24h', '48h', 'Positive C'),
levels = c('Negative C', 'Positive C', '2h', '8h', '24h', '48h'),
ordered = T))
reshaped <- merge(reshaped, plot_labels, by = 'activation.time')
head(reshaped)
