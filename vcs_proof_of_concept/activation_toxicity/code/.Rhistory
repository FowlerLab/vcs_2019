guides(fill=guide_legend(title='Phenotype')) +
scale_fill_manual(values = c('#91bfdb', '#fc8d59', '#ffffbf')) +
xlab('Lobulation Score') +
ylab('Count')
degs_dmso_shape_exp2 <- fit_models(cds_exp2.mnn_dmso,
model_formula_str = '~shape_score + S.Score + G2M.Score')
# derive beta coefficients
coeffs_dmso_shape_exp2 <- coefficient_table(degs_dmso_shape_exp2)
coeffs_dmso_shape_exp2 <- as.data.frame(coeffs_dmso_shape_exp2)
#write.csv(coeffs_dmso_shape_exp2, 'degs_dmso_shape_exp2.csv')
# plot volcano plot
ggplot(coeffs_dmso_shape_exp2[which(coeffs_dmso_shape_exp2$term == 'shape_score'),], aes(x = normalized_effect)) + geom_histogram(bins = 100) + geom_vline(xintercept = -0.1, linetype='dashed') + geom_vline(xintercept = 0.1, linetype ='dashed')
coeffs_dmso_shape_exp2$significant_deg = abs(coeffs_dmso_shape_exp2$normalized_effect) > 0.25 & coeffs_dmso_shape_exp2$q_value < 0.01
coeffs_dmso_shape_exp2$hvg = coeffs_dmso_shape_exp2$id %in% chosen
print(sum(coeffs_dmso_shape_exp2$significant_deg & coeffs_dmso_shape_exp2$term == 'shape_score')) # number of genes significantly associated with lobulation score
print(sum(coeffs_dmso_shape_exp2$significant_deg & coeffs_dmso_shape_exp2$term == 'shape_score' & coeffs_dmso_shape_exp2$normalized_effect < 0) / sum(coeffs_dmso_shape_exp2$significant_deg & coeffs_dmso_shape_exp2$term == 'shape_score')) # number of genes that have higher expression in normal cells
write.csv(coeffs_dmso_shape_exp2[which(coeffs_dmso_shape_exp2$significant_deg & coeffs_dmso_shape_exp2$term == 'shape_score'),], 'ST5_DMSO.csv')
ggplot(coeffs_dmso_shape_exp2[which(coeffs_dmso_shape_exp2$term == 'shape_score'),], aes(x = normalized_effect, y = -log10(q_value), color = significant_deg)) +
geom_point(size = 1) +
theme_classic() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
strip.text.x = element_text(size=16),
strip.background = element_blank(),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
xlab('Log2(Effect Size)') +
ylab('-Log10(q value)') +
scale_color_manual(values = c('#bababa', '#ca0020')) +
guides(color=FALSE)
coeffs_dmso_shape_exp2[order(coeffs_dmso_shape_exp2$q_value),]
upreg_degs = coeffs_dmso_shape_exp2[which(coeffs_dmso_shape_exp2$term == 'shape_score' &
coeffs_dmso_shape_exp2$significant_deg &
coeffs_dmso_shape_exp2$normalized_effect > 0),'gene_short_name']
downreg_degs = coeffs_dmso_shape_exp2[which(coeffs_dmso_shape_exp2$term == 'shape_score' &
coeffs_dmso_shape_exp2$significant_deg &
coeffs_dmso_shape_exp2$normalized_effect < 0),'gene_short_name']
gsea_analysis <- function(degs, universe, geneset_file){
gsc_hallmarks = loadGSCSafe(file = geneset_file) # load geneset
gsc_result = piano::runGSAhyper(genes = degs, # perform gsea
universe = as.character(unique(universe)),
gsc = gsc_hallmarks)
output = as.data.frame(gsc_result$resTab)
output$sig_genest_in_geneset <- sapply(row.names(output), function(x) {
all_genes = unlist(gsc_result$gsc[x][[1]])
return(paste0(intersect(degs, all_genes), collapse = ', '))
})
return(output)
}
# the universe are any genes tested by the deg test
universe = unique(coeffs_dmso_shape_exp2$gene_short_name)
# look at upreg degs in the two genesets:
hallmarks_upreg <- gsea_analysis(upreg_degs,
universe,
'../data/genesets/h.all.v6.2.symbols.gmt')
canonpaths_upreg <- gsea_analysis(upreg_degs,
universe,
'../data/genesets/c2.cp.v7.0.symbols.gmt')
# look at downreg degs in the two genesets
hallmarks_downreg <- gsea_analysis(downreg_degs,
universe,
'../data/genesets/h.all.v6.2.symbols.gmt'); hallmarks_downreg = hallmarks_downreg[which(hallmarks_downreg$`Adjusted p-value` < 0.01),] ; write.csv(hallmarks_downreg[order(hallmarks_downreg$`Adjusted p-value`),],
'ST7_DMSO.csv')
canonpaths_downreg <- gsea_analysis(downreg_degs,
universe,
'../data/genesets/c2.cp.v7.0.symbols.gmt'); canonpaths_downreg = canonpaths_downreg[which(canonpaths_downreg$`Adjusted p-value` < 0.01),] ; canonpaths_downreg$prop_genes = canonpaths_downreg$`Significant (in gene set)`/(canonpaths_downreg$`Non-significant (in gene set)`+canonpaths_downreg$`Significant (in gene set)`) ; write.csv(canonpaths_downreg[order(canonpaths_downreg$prop_genes, decreasing = T),],
'ST6_DMSO.csv')
GOIs = c('TUBB4B',
'CLU',
'HSPA5',
'STMN1',
'CCT5')
get_gene_df <- function(cds, ids = NULL, genes = NULL, corr = T) {
# if gene names given, retrieve ids
if(!is.null(genes)) { ids = rowData(cds)[which(rowData(cds)$gene_short_name %in% genes),'id'] }
ids = as.character(ids)
# correct values for size factor and bind to cell data
gene_expr       <- exprs(cds[ids,])
if(corr) {corr_gene_expr  <-  as.data.frame(apply(gene_expr, 1, function(x) x / colData(cds)$Size_Factor))} else {corr_gene_expr = t(gene_expr)}
colnames(corr_gene_expr) <- rowData(cds)[ids,'gene_short_name']
output = cbind(colData(cds), corr_gene_expr)
# return the output
return(as.data.frame(output))
}
# look at some select genes
df_chosen_genes <- get_gene_df(cds_exp2.mnn_dmso, genes = GOIs, corr = F)
# reshape to long format
df_chosen_genes_long <- melt(df_chosen_genes, id.vars = c('cell', 'S.Score', 'G2M.Score', 'Phase', 'sample', 'Size_Factor', 'shape_score', 'pheno'))
df_chosen_genes_long$value = as.numeric(df_chosen_genes_long$value)
df_chosen_genes_long$gene = factor(as.factor(df_chosen_genes_long$variable),
levels = GOIs,
ordered = T)
# create an annotation df with log2(ES) and qvalue
annotation_df = as.data.frame(coeffs_dmso_shape_exp2[which(coeffs_dmso_shape_exp2$term == 'shape_score' &
coeffs_dmso_shape_exp2$gene_short_name %in% GOIs),
c('gene_short_name', 'q_value', 'normalized_effect')])
annotation_df$variable = annotation_df$gene_short_name
annotation_df$gene = factor(as.factor(annotation_df$variable),
levels = GOIs,
ordered = T)
annotation_df$annotation = paste0('q val: ',
format(unlist(annotation_df['q_value']), format='e', digits = 2),
'\nlog2(ES): ',
format(unlist(annotation_df['normalized_effect']), digits = 2))
# plot
ggplot(df_chosen_genes_long) +
#ggplot(df_chosen_genes_long[which(df_chosen_genes_long$Phase == 'G2M'),]) +
geom_jitter(size = 1, alpha = 0.2, aes(x = shape_score, y = value, color = Phase)) +
facet_wrap(~gene, scales = 'free', ncol = 3) +
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16),
strip.text.x = element_text(size=16),
strip.background = element_blank(),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
geom_text(data = annotation_df, x= Inf, y = Inf, hjust = 1, vjust = 1, aes(label = annotation)) +
guides(fill=guide_legend(title='Phenotype')) +
ylab('Gene Count') +
xlab('Lobulation Score') +
scale_fill_manual(values = c('#91bfdb', '#fc8d59')) +
geom_smooth(method="glm.nb",formula=y~x, aes(x = shape_score, y = value, color = Phase))
# Microtubule genes
## Source: REACTOME R-HSA-5610524; REACTOME R-HSA-5610525, plus stathmin
tubulin_genes = c('TUBA1C', 'TUBA1B', 'TUBA4A', 'TUBA1A', 'TUBA3C', 'TUBA3D', 'TUBB3', 'TUBB4A', 'TUBB4B', 'TUBB2A', 'TUBB1', 'TUBB2B', 'TUBB6', 'STMN1')
tubulin_df <- coeffs_dmso_shape_exp2[which(coeffs_dmso_shape_exp2$gene_short_name %in% tubulin_genes & coeffs_dmso_shape_exp2$term == 'shape_score'),]
tubulin_df$group = 'tubulin-related'
# Chaperones
## Source: REACTOME R-HSA-390455;
TRiC_genes = c('TCP1', 'CCT2', 'CCT3', 'CCT4', 'CCT5', 'CCT6A', 'CCT6B', 'TRAP1', 'CCT7', 'CCT8', # TRiC
'CLU', 'HSPA5', # Clusterin
'HSP90AA1', 'HSP90AB1', 'HSP90B1', 'HSP90AA2') # HSP90
tric_df <- coeffs_dmso_shape_exp2[which(coeffs_dmso_shape_exp2$gene_short_name %in% TRiC_genes & coeffs_dmso_shape_exp2$term == 'shape_score'),]
tric_df$group = 'chaperones'
all_GOI_df = rbind(tubulin_df, tric_df)
# make a color scale
max_abs_val = max(abs(all_GOI_df$normalized_effect))
pallette = colorRampPalette(c('#b2182b','#d6604d','#f4a582','#fddbc7','#f7f7f7','#d1e5f0','#92c5de','#4393c3','#2166ac'))
pallette = data.frame(val = seq(from = -max_abs_val,
to = max_abs_val,
length.out = 50),
color = pallette(50))
# apply the color scale to the dataset
all_GOI_df$color = sapply(all_GOI_df$normalized_effect, function(x) {
return(pallette[which(abs(x - pallette$val) == min(abs(x - pallette$val))),'color'])
})
print(sapply(c(-0.2, -.15,-.1,-.5, 0), function(x) {
return(pallette[which(abs(x - pallette$val) == min(abs(x - pallette$val))),'color'])
}))
# make a dataframe with genes and hallmarks according to shape score
make_pheatmap <- function(cds,
gene_set,
deg_df,
approx_group_size = 500,
exclude_insig_genes = T,
for_png = F) {
# get ids
ids = unlist(sapply(gene_set, function(x) {
as.character(rowData(cds)[which(rowData(cds)$gene_short_name == x),'id'])
}))
# group cells by shape score
cell_group_df <- tibble::tibble(cell = row.names(colData(cds)),
cell_group = cut(x = colData(cds)$shape_score,
round(ncol(cds)/approx_group_size)))
# make matrix
agg_mat <- aggregate_gene_expression(cds[ids,],
cell_group_df =  cell_group_df,
norm_method = 'log')
# rescale the matrix
rescaled_agg_mat <- t(apply(agg_mat, 1, scale)); colnames(rescaled_agg_mat) = colnames(agg_mat)
# make column annotations
anncol <- bind_rows(lapply(levels(cell_group_df$cell_group), function(x) {
data.frame(median_shapescore = median(colData(cds)[which(cell_group_df$cell_group == x),'shape_score']))
})) ; row.names(anncol) <- levels(cell_group_df$cell_group)
# make row annotations
annrow <- deg_df[which(deg_df$id %in% ids),c('id','normalized_effect','q_value','significant_deg', 'gene_short_name')]
annrow <- annrow[which(annrow$significant_deg),]
# reorder the matrix in the same way as the annotation rows
annrow <- annrow[order(-1*as.numeric(annrow$significant_deg), annrow$normalized_effect),] # order row annotations
rescaled_agg_mat<-rescaled_agg_mat[match(annrow$id, row.names(rescaled_agg_mat)),]
# make the heatmap
if(for_png){
pheatmap::pheatmap(rescaled_agg_mat,
color = RColorBrewer::brewer.pal(9, 'Reds'),
breaks = seq(-2,2, length.out = 9),
cluster_rows = FALSE,
cluster_cols = FALSE,
fontsize = 24,
#annotation_row = data.frame(normalized_effect = annrow$normalized_effect,
#row.names = annrow$id),
annotation_col = anncol,
labels_row= annrow$gene_short_name,
cuttree_rows = 2,
annotation_colors = list(normalized_effect = rev(RColorBrewer::brewer.pal(9, 'Reds'))[1:5],
median_shapescore = RColorBrewer::brewer.pal(9, 'Greys')))} else {
pheatmap::pheatmap(rescaled_agg_mat,
color = RColorBrewer::brewer.pal(9, 'Reds'),
breaks = seq(-2,2, length.out = 9),
cluster_rows = FALSE,
cluster_cols = FALSE,
#annotation_row = data.frame(normalized_effect = annrow$normalized_effect,
#row.names = annrow$id),
annotation_col = anncol,
labels_row= annrow$gene_short_name,
cuttree_rows = 2,
annotation_colors = list(normalized_effect = rev(RColorBrewer::brewer.pal(9, 'Reds'))[1:5],
median_shapescore = RColorBrewer::brewer.pal(9, 'Greys')))
}
}
save_pheatmap <- function(x, filename, width=900, height=1800) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
png(filename,width = width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
# load geneset
hallmarks = loadGSCSafe('../data/genesets/h.all.v6.2.symbols.gmt')
canonpaths = loadGSCSafe('../data/genesets/c2.cp.v7.0.symbols.gmt')
## Make Myc Heatmap
ph <- make_pheatmap(cds = cds_exp2.mnn_dmso,
gene_set = as.character(unlist(hallmarks$gsc$HALLMARK_MYC_TARGETS_V1)),
deg_df = coeffs_dmso_shape_exp2[which(coeffs_dmso_shape_exp2$term == 'shape_score'),],
approx_group_size = 400,
exclude_insig_genes = T,for_png = F
)
## Make mTOR Heatmap
ph <- make_pheatmap(cds = cds_exp2.mnn_dmso,
gene_set = as.character(unlist(hallmarks$gsc$HALLMARK_MTORC1_SIGNALING)),
deg_df = coeffs_dmso_shape_exp2[which(coeffs_dmso_shape_exp2$term == 'shape_score'),],
approx_group_size = 400,
exclude_insig_genes = T,
for_png = F
)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(reshape2)
X01_26_18_data <- read.csv("../data/flojo_output.csv")[,1:18]
colnames(X01_26_18_data) <- c('sample', 'all.necr', 'all.dead', 'all.apop', 'all.live', 'perc.act', 'act.necr', 'unact.live', 'unact.apop', 'unact.dead', 'unact.necr', 'perc.unact', 'act.dead', 'act.apop', 'act.live', 'activation.time', 'replicate')
reshaped <- melt(X01_26_18_data, id.vars = c('sample', 'activation.time', 'replicate'))
rename_column <- function(variable){
gating <- unlist(strsplit(as.character(variable), '.', fixed = TRUE))[1]
subpop <- unlist(strsplit(as.character(variable), '.', fixed = TRUE))[2]
return(c(gating, subpop))
}
new_columns <- t(rbind(sapply(reshaped$variable, rename_column)))
reshaped$gating <- new_columns[,1]
reshaped$subpop <- new_columns[,2]
# need to remove rows that use mean or SD
reshaped <- reshaped[which(reshaped$replicate != "-"),]
#reorder activation factors
plot_labels = data.frame(activation.time = c('negative_control', '2h', '8h', '24h', '48h', 'positive_control'),
activation.time.plot = factor(c('Negative C', '2h', '8h', '24h', '48h', 'Positive C'),
levels = c('Negative C', 'Positive C', '2h', '8h', '24h', '48h'),
ordered = T))
reshaped <- merge(reshaped, plot_labels, by = 'activation.time')
print(min())
ggplot(reshaped[which((reshaped$gating == 'all' & reshaped$activation.time == 'negative_control' |
reshaped$gating == 'all' & reshaped$activation.time == 'positive_control' |
reshaped$gating == 'act' & reshaped$activation.time != 'negative_control' & reshaped$activation.time != 'positive_control') &
reshaped$subpop != 'live'),],
aes(x = activation.time.plot, y = value/100, fill = subpop)) +
geom_point(color='black', pch=21, size = 2) +
theme_classic() +
scale_y_continuous(labels=scales::percent_format(accuracy = 1)) +
xlab('Proportion miRFP-positive\nCells in Coculture') +
guides(fill = guide_legend(title = 'Cell Viability')) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14),
axis.title.y = element_blank(),
axis.text.x=element_text(angle=45, hjust = 1),
legend.position = c(.95, .95)) +
scale_fill_manual(values = c('#66c2a5','#fc8d62','#8da0cb'))
ggsave('SF1B.png', dpi=600, width=2.75, height=2.75)
ggplot(reshaped[which((reshaped$gating == 'all' & reshaped$activation.time == 'negative_control' |
reshaped$gating == 'all' & reshaped$activation.time == 'positive_control' |
reshaped$gating == 'act' & reshaped$activation.time != 'negative_control' & reshaped$activation.time != 'positive_control') &
reshaped$subpop != 'live'),],
aes(x = activation.time.plot, y = value/100, fill = subpop)) +
geom_point(color='black', pch=21, size = 2) +
theme_classic() +
scale_y_continuous(labels=scales::percent_format(accuracy = 1)) +
xlab('Proportion miRFP-positive\nCells in Coculture') +
guides(fill = False) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14),
axis.title.y = element_blank(),
axis.text.x=element_text(angle=45, hjust = 1)) +
scale_fill_manual(values = c('#66c2a5','#fc8d62','#8da0cb'))
ggplot(reshaped[which((reshaped$gating == 'all' & reshaped$activation.time == 'negative_control' |
reshaped$gating == 'all' & reshaped$activation.time == 'positive_control' |
reshaped$gating == 'act' & reshaped$activation.time != 'negative_control' & reshaped$activation.time != 'positive_control') &
reshaped$subpop != 'live'),],
aes(x = activation.time.plot, y = value/100, fill = subpop)) +
geom_point(color='black', pch=21, size = 2) +
theme_classic() +
scale_y_continuous(labels=scales::percent_format(accuracy = 1)) +
xlab('Proportion miRFP-positive\nCells in Coculture') +
guides(fill = FALSE) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14),
axis.title.y = element_blank(),
axis.text.x=element_text(angle=45, hjust = 1)) +
scale_fill_manual(values = c('#66c2a5','#fc8d62','#8da0cb'))
ggsave('SF1B.png', dpi=600, width=2.75, height=2.75)
ggplot(reshaped[which((reshaped$gating == 'all' & reshaped$activation.time == 'negative_control' |
reshaped$gating == 'all' & reshaped$activation.time == 'positive_control' |
reshaped$gating == 'act' & reshaped$activation.time != 'negative_control' & reshaped$activation.time != 'positive_control') &
reshaped$subpop != 'live'),],
aes(x = activation.time.plot, y = value/100, fill = subpop)) +
geom_point(color='black', pch=21, size = 2) +
theme_classic() +
scale_y_continuous(labels=scales::percent_format(accuracy = 1)) +
xlab('Time after 800 ms activation') +
guides(fill = FALSE) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=12),
axis.title.y = element_blank(),
axis.text.x=element_text(angle=45, hjust = 1)) +
scale_fill_manual(values = c('#66c2a5','#fc8d62','#8da0cb'))
ggsave('SF1B.png', dpi=600, width=2.75, height=2.75)
ggplot(reshaped[which((reshaped$gating == 'all' & reshaped$activation.time == 'negative_control' |
reshaped$gating == 'all' & reshaped$activation.time == 'positive_control' |
reshaped$gating == 'act' & reshaped$activation.time != 'negative_control' & reshaped$activation.time != 'positive_control') &
reshaped$subpop != 'live'),],
aes(x = activation.time.plot, y = value/100, fill = subpop)) +
geom_point(color='black', pch=21, size = 2) +
theme_classic() +
scale_y_continuous(labels=scales::percent_format(accuracy = 1)) +
xlab('Time after 800 ms activation') +
#guides(fill = FALSE) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=12),
axis.title.y = element_blank(),
axis.text.x=element_text(angle=45, hjust = 1)) +
scale_fill_manual(values = c('#66c2a5','#fc8d62','#8da0cb'))
suppressPackageStartupMessages({
library(monocle)
library(dplyr)
library(ggplot2)
library(reshape2)
library(viridis)
library(ggridges)
library(GGally)
})
BiocManager::install('GGally')
suppressPackageStartupMessages({
library(monocle)
library(dplyr)
library(ggplot2)
library(reshape2)
library(viridis)
library(ggridges)
library(GGally)
})
sessionInfo()
load.cds = function(mat.path, gene.annotation.path, cell.annotation.path) {
df = read.table(
mat.path,
col.names = c("gene.idx", "cell.idx", "count"),
colClasses = c("integer", "integer", "integer"))
gene.annotations = read.table(
gene.annotation.path,
col.names = c("id", "gene_short_name"),
colClasses = c("character", "character"))
cell.annotations = read.table(
cell.annotation.path,
col.names = c("cell", "sample"),
colClasses = c("character", "factor"))
rownames(gene.annotations) = gene.annotations$id
rownames(cell.annotations) = cell.annotations$cell
# add a dummy cell to ensure that all genes are included in the matrix
# even if a gene isn't expressed in any cell
df = rbind(df, data.frame(
gene.idx = c(1, nrow(gene.annotations)),
cell.idx = rep(nrow(cell.annotations)+1, 2),
count = c(1, 1)))
mat = sparseMatrix(i = df$gene.idx, j = df$cell.idx, x = df$count)
mat = mat[, 1:(ncol(mat)-1)]
print(dim(mat))
rownames(mat) = gene.annotations$id
colnames(mat) = cell.annotations$cell
pd = new("AnnotatedDataFrame", data = cell.annotations)
fd = new("AnnotatedDataFrame", data = gene.annotations)
cds = monocle::newCellDataSet(mat, phenoData = pd, featureData = fd, expressionFamily
= negbinomial.size())
pData(cds)$n.umi = apply(mat, 2, sum)
return(cds)
}
cds = load.cds(
"../data/UMI.count_bulk_RNAseq.matrix",
"../data/gene_bulk_RNAseq.annotations",
"../data/cell_bulk_RNAseq.annotations")
dim(cds)
head(fData(cds), 2)
head(pData(cds), 2)
pd = pData(cds)[(pData(cds)$n.umi> 10000),]
expression_mat = exprs(cds)[,(pData(cds)$n.umi> 10000)]
df = data.frame( cell = c("NH1__A12","NH2__B12","NH3__C12","NH4__D12",
"NH5__E12","NH6__F12","NH7__G12","NH8__H12"),
activation = c(FALSE, FALSE, TRUE, TRUE,
TRUE,TRUE,TRUE, TRUE),
time = c(0, 0, 6, .5, 1.5, 2.5, 3.5, 4.5))
pd = left_join(pd, df)
pd = new("AnnotatedDataFrame", data = pd)
rownames(pData(pd)) = colnames(expression_mat)
fd = new("AnnotatedDataFrame", data = fData(cds))
cds = newCellDataSet(expression_mat, phenoData = pd, featureData = fd, expressionFamily = negbinomial.size())
cds = estimateSizeFactors(cds)
cds <- estimateDispersions(cds)
pData(cds)
head(rownames(fData(cds))[grepl("^ENSG", fData(cds)$id)])
cds <- reduceDimension(cds,
max_components = 5,
norm_method = 'log',
reduction_method = 'ICA',
verbose = T)
pData(cds)$ICA1 = cds@reducedDimS[1,]
pData(cds)$ICA2 = cds@reducedDimS[2,]
pData(cds)$ICA3 = cds@reducedDimS[3,]
pData(cds)$ICA4 = cds@reducedDimS[4,]
ggplot(pData(cds), aes(x = ICA1, y = ICA2, color = Size_Factor))+
geom_point() +
theme_classic() +
scale_color_viridis(option = "inferno")
ggplot(pData(cds), aes(x = ICA2, y = ICA3, color = Size_Factor))+
geom_point() +
theme_classic() +
scale_color_viridis(option = "inferno")
library("DESeq2")
BiocManager::install('DESeq2')
library("DESeq2")
dds = DESeqDataSetFromMatrix(countData = exprs(cds),
colData = pData(cds),
design = ~ activation)
dds <- DESeq(dds)
res <- results(dds)
res
plotMA(res, ylim=c(-2,2))
resLFC <- lfcShrink(dds, coef="activationTRUE")
resLFC
plotMA(resLFC, ylim=c(-2,2))
plotDispEsts(dds)
ggplot(as.data.frame(res), aes(x = padj)) + geom_histogram(bins = 500) + theme_classic()
to_plot = as.data.frame(res)
to_plot[nrow(to_plot+1),] = c(NA, NA, NA, NA, NA, 0)
to_plot[is.na(to_plot$padj), 'padj'] = 1
to_plot$significant = to_plot$padj < .01
to_plot$significant = factor(to_plot$significant, levels = c(FALSE, TRUE), ordered=T)
ggplot(to_plot, aes(x = log2FoldChange, y = -log10(padj), fill = significant)) +
geom_point(size = 1, pch=21, color='black') +
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14)) +
ylim(0,2) +
xlab("Log2 Fold Change") +
scale_fill_manual(values=c('#bababa', '#d7191c')) +
geom_hline(yintercept = 2, linetype='dashed') +
guides(fill=FALSE)
ggsave('F1C.png', dpi=600, width=2.75, height=2.75)
ggplot(to_plot, aes(x = log2FoldChange, y = -log10(padj), fill = significant)) +
geom_point(size = 1, pch=21, color='black') +
theme_classic() +
theme(text=element_text(size=10),
axis.title=element_text(size=12)) +
ylim(0,2) +
xlab("Log2 Fold Change") +
scale_fill_manual(values=c('#bababa', '#d7191c')) +
geom_hline(yintercept = 2, linetype='dashed') +
guides(fill=FALSE)
ggsave('F1C.png', dpi=600, width=2.75, height=2.75)
setwd("D:/OneDrive - UW/PhD/Publications/VCS_2019/github_repo/vcs_2019/vcs_proof_of_concept/activation_toxicity/code")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(reshape2)
X01_26_18_data <- read.csv("../data/flojo_output.csv")[,1:18]
colnames(X01_26_18_data) <- c('sample', 'all.necr', 'all.dead', 'all.apop', 'all.live', 'perc.act', 'act.necr', 'unact.live', 'unact.apop', 'unact.dead', 'unact.necr', 'perc.unact', 'act.dead', 'act.apop', 'act.live', 'activation.time', 'replicate')
reshaped <- melt(X01_26_18_data, id.vars = c('sample', 'activation.time', 'replicate'))
rename_column <- function(variable){
gating <- unlist(strsplit(as.character(variable), '.', fixed = TRUE))[1]
subpop <- unlist(strsplit(as.character(variable), '.', fixed = TRUE))[2]
return(c(gating, subpop))
}
new_columns <- t(rbind(sapply(reshaped$variable, rename_column)))
reshaped$gating <- new_columns[,1]
reshaped$subpop <- new_columns[,2]
# need to remove rows that use mean or SD
reshaped <- reshaped[which(reshaped$replicate != "-"),]
#reorder activation factors
plot_labels = data.frame(activation.time = c('negative_control', '2h', '8h', '24h', '48h', 'positive_control'),
activation.time.plot = factor(c('Negative C', '2h', '8h', '24h', '48h', 'Positive C'),
levels = c('Negative C', 'Positive C', '2h', '8h', '24h', '48h'),
ordered = T))
reshaped <- merge(reshaped, plot_labels, by = 'activation.time')
print(min())
ggplot(reshaped[which((reshaped$gating == 'all' & reshaped$activation.time == 'negative_control' |
reshaped$gating == 'all' & reshaped$activation.time == 'positive_control' |
reshaped$gating == 'act' & reshaped$activation.time != 'negative_control' & reshaped$activation.time != 'positive_control') &
reshaped$subpop != 'live'),],
aes(x = activation.time.plot, y = value/100, fill = subpop)) +
geom_point(color='black', pch=21, size = 2) +
theme_classic() +
scale_y_continuous(labels=scales::percent_format(accuracy = 1)) +
xlab('Time after 800 ms activation') +
guides(fill = FALSE) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=12),
axis.title.y = element_blank(),
axis.text.x=element_text(angle=45, hjust = 1)) +
scale_fill_manual(values = c('#66c2a5','#fc8d62','#8da0cb'))
ggsave('EV1C.png', dpi=600, width=2.75, height=2.75)
